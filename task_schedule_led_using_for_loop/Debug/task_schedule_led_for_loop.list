
task_schedule_led_for_loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ff0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800126c  0800126c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800126c  0800126c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800126c  0800126c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800126c  0800126c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001270  08001270  00011270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000064  080012d8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080012d8  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002535  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000713  00000000  00000000  000225c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00022ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00022eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bd3  00000000  00000000  00023048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017f1  00000000  00000000  00025c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009613  00000000  00000000  0002740c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030a1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bc0  00000000  00000000  00030a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001180 	.word	0x08001180

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001180 	.word	0x08001180

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <led_off+0x30>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40020c14 	.word	0x40020c14

080002e8 <main>:
TCB_t user_task[MAX_TASK];



int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	enable_precessor_faults();
 80002ec:	f000 f938 	bl	8000560 <enable_precessor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <main+0x28>)
 80002f2:	f000 f88f 	bl	8000414 <init_scheduler_stack>

	init_task_stack(); //Creating dummy stack frame.
 80002f6:	f000 f893 	bl	8000420 <init_task_stack>

	led_init_all();
 80002fa:	f7ff ff89 	bl	8000210 <led_init_all>

	init_systic_timer(TICK_HZ);
 80002fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000302:	f000 f84f 	bl	80003a4 <init_systic_timer>

	switch_sp_to_psp();
 8000306:	f000 f91d 	bl	8000544 <switch_sp_to_psp>

	task1_handler();
 800030a:	f000 f803 	bl	8000314 <task1_handler>

	for(;;);
 800030e:	e7fe      	b.n	800030e <main+0x26>
 8000310:	2001f000 	.word	0x2001f000

08000314 <task1_handler>:
}


void task1_handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000318:	200c      	movs	r0, #12
 800031a:	f7ff ffb3 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <task1_handler+0x20>)
 8000320:	f7ff ff62 	bl	80001e8 <delay>
		led_off(LED_GREEN);
 8000324:	200c      	movs	r0, #12
 8000326:	f7ff ffc5 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <task1_handler+0x20>)
 800032c:	f7ff ff5c 	bl	80001e8 <delay>
		led_on(LED_GREEN);
 8000330:	e7f2      	b.n	8000318 <task1_handler+0x4>
 8000332:	bf00      	nop
 8000334:	001312d0 	.word	0x001312d0

08000338 <task2_handler>:
	}
}


void task2_handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 800033c:	200d      	movs	r0, #13
 800033e:	f7ff ffa1 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <task2_handler+0x20>)
 8000344:	f7ff ff50 	bl	80001e8 <delay>
		led_off(LED_ORANGE);
 8000348:	200d      	movs	r0, #13
 800034a:	f7ff ffb3 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <task2_handler+0x20>)
 8000350:	f7ff ff4a 	bl	80001e8 <delay>
		led_on(LED_ORANGE);
 8000354:	e7f2      	b.n	800033c <task2_handler+0x4>
 8000356:	bf00      	nop
 8000358:	00098968 	.word	0x00098968

0800035c <task3_handler>:
	}
}


void task3_handler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000360:	200f      	movs	r0, #15
 8000362:	f7ff ff8f 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <task3_handler+0x20>)
 8000368:	f7ff ff3e 	bl	80001e8 <delay>
		led_off(LED_BLUE);
 800036c:	200f      	movs	r0, #15
 800036e:	f7ff ffa1 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <task3_handler+0x20>)
 8000374:	f7ff ff38 	bl	80001e8 <delay>
		led_on(LED_BLUE);
 8000378:	e7f2      	b.n	8000360 <task3_handler+0x4>
 800037a:	bf00      	nop
 800037c:	0004c4b4 	.word	0x0004c4b4

08000380 <task4_handler>:
	}
}


void task4_handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000384:	200e      	movs	r0, #14
 8000386:	f7ff ff7d 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <task4_handler+0x20>)
 800038c:	f7ff ff2c 	bl	80001e8 <delay>
		led_off(LED_RED);
 8000390:	200e      	movs	r0, #14
 8000392:	f7ff ff8f 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 8000396:	4802      	ldr	r0, [pc, #8]	; (80003a0 <task4_handler+0x20>)
 8000398:	f7ff ff26 	bl	80001e8 <delay>
		led_on(LED_RED);
 800039c:	e7f2      	b.n	8000384 <task4_handler+0x4>
 800039e:	bf00      	nop
 80003a0:	0002625a 	.word	0x0002625a

080003a4 <init_systic_timer>:
	}
}


void init_systic_timer(uint32_t tick_hz)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	//Address of SYSTICK reload value resister.
	uint32_t *pSYST_RVR = (uint32_t*)0xE000E014;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <init_systic_timer+0x64>)
 80003ae:	617b      	str	r3, [r7, #20]
	//SYSTICk control and status register.
	uint32_t *pSYST_CSR = (uint32_t*)0xE000E010;
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <init_systic_timer+0x68>)
 80003b2:	613b      	str	r3, [r7, #16]

	//Reload value calculation.
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz);
 80003b4:	4a16      	ldr	r2, [pc, #88]	; (8000410 <init_systic_timer+0x6c>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003bc:	60fb      	str	r3, [r7, #12]

	//Clear the value of SYST_RVR(reload value resister).
	*pSYST_RVR &= ~(0x00FFFFFF);
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	601a      	str	r2, [r3, #0]
	//Load the value into SYST_RVR(reload value resister).
	*pSYST_RVR |= (count_value -1); //-1 is required due to SYSTICK exception will triggered after copying the value from RVR to CVR.
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	431a      	orrs	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pSYST_CSR |= (0x1 << 1);  //Enable SYSTICK exception request.
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f043 0202 	orr.w	r2, r3, #2
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (0x1 << 2);  //Indicate the clock source, processor clock source.
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f043 0204 	orr.w	r2, r3, #4
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	601a      	str	r2, [r3, #0]

	//Enable the SYSTICK
	*pSYST_CSR |= (0x1 << 0);  // Enable the SYSTICK counter.
 80003f0:	693b      	ldr	r3, [r7, #16]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f043 0201 	orr.w	r2, r3, #1
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	601a      	str	r2, [r3, #0]

}
 80003fc:	bf00      	nop
 80003fe:	371c      	adds	r7, #28
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	e000e014 	.word	0xe000e014
 800040c:	e000e010 	.word	0xe000e010
 8000410:	00f42400 	.word	0x00f42400

08000414 <init_scheduler_stack>:


__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000414:	4603      	mov	r3, r0
	//Using general purpose register to move the value in MSP.
	//__asm volatile ("MSR MSP,R0");

	//Using GCC inline assembly syntax using C variable.
	__asm volatile ("MSR MSP,%0"::"r"(sched_top_of_stack): );
 8000416:	f383 8808 	msr	MSP, r3

	//Loading the value of LR into PC because this is a naked function and we must go back to main after executing this function.
	//Naked function does not have any epilogue and prologue sequence.
	__asm volatile ("BX LR");
 800041a:	4770      	bx	lr
}
 800041c:	bf00      	nop
	...

08000420 <init_task_stack>:




void init_task_stack(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
	user_task[0].current_state = TASK_RUNNING_STATE;
 8000426:	4b35      	ldr	r3, [pc, #212]	; (80004fc <init_task_stack+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	721a      	strb	r2, [r3, #8]
	user_task[1].current_state = TASK_RUNNING_STATE;
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <init_task_stack+0xdc>)
 800042e:	2200      	movs	r2, #0
 8000430:	761a      	strb	r2, [r3, #24]
	user_task[2].current_state = TASK_RUNNING_STATE;
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <init_task_stack+0xdc>)
 8000434:	2200      	movs	r2, #0
 8000436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_task[3].current_state = TASK_RUNNING_STATE;
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <init_task_stack+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	user_task[0].psp_value = T1_STACK_START;
 8000442:	4b2e      	ldr	r3, [pc, #184]	; (80004fc <init_task_stack+0xdc>)
 8000444:	4a2e      	ldr	r2, [pc, #184]	; (8000500 <init_task_stack+0xe0>)
 8000446:	601a      	str	r2, [r3, #0]
	user_task[1].psp_value = T2_STACK_START;
 8000448:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <init_task_stack+0xdc>)
 800044a:	4a2e      	ldr	r2, [pc, #184]	; (8000504 <init_task_stack+0xe4>)
 800044c:	611a      	str	r2, [r3, #16]
	user_task[2].psp_value = T3_STACK_START;
 800044e:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <init_task_stack+0xdc>)
 8000450:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <init_task_stack+0xe8>)
 8000452:	621a      	str	r2, [r3, #32]
	user_task[3].psp_value = T4_STACK_START;
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <init_task_stack+0xdc>)
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <init_task_stack+0xec>)
 8000458:	631a      	str	r2, [r3, #48]	; 0x30

	user_task[0].task_handler = task1_handler;
 800045a:	4b28      	ldr	r3, [pc, #160]	; (80004fc <init_task_stack+0xdc>)
 800045c:	4a2c      	ldr	r2, [pc, #176]	; (8000510 <init_task_stack+0xf0>)
 800045e:	60da      	str	r2, [r3, #12]
	user_task[1].task_handler = task2_handler;
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <init_task_stack+0xdc>)
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <init_task_stack+0xf4>)
 8000464:	61da      	str	r2, [r3, #28]
	user_task[2].task_handler = task3_handler;
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <init_task_stack+0xdc>)
 8000468:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <init_task_stack+0xf8>)
 800046a:	62da      	str	r2, [r3, #44]	; 0x2c
	user_task[3].task_handler = task4_handler;
 800046c:	4b23      	ldr	r3, [pc, #140]	; (80004fc <init_task_stack+0xdc>)
 800046e:	4a2b      	ldr	r2, [pc, #172]	; (800051c <init_task_stack+0xfc>)
 8000470:	63da      	str	r2, [r3, #60]	; 0x3c

	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASK; i++)
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e037      	b.n	80004e8 <init_task_stack+0xc8>
	{
		pPSP = (uint32_t*)user_task[i].psp_value;
 8000478:	4a20      	ldr	r2, [pc, #128]	; (80004fc <init_task_stack+0xdc>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3b04      	subs	r3, #4
 8000488:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_xPSR; //value should be 0x01000000.
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000490:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3b04      	subs	r3, #4
 8000496:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_task[i].task_handler;  //PC value.
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <init_task_stack+0xdc>)
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	330c      	adds	r3, #12
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

		pPSP--;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;  //LR value.
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	e008      	b.n	80004d0 <init_task_stack+0xb0>
		{
			pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b0c      	cmp	r3, #12
 80004d4:	ddf3      	ble.n	80004be <init_task_stack+0x9e>
		}
		//Saving the address of the stack pointer(in this case PSP).
		user_task[i].psp_value = (uint32_t)pPSP;
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4908      	ldr	r1, [pc, #32]	; (80004fc <init_task_stack+0xdc>)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	440b      	add	r3, r1
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASK; i++)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	ddc4      	ble.n	8000478 <init_task_stack+0x58>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000090 	.word	0x20000090
 8000500:	20020000 	.word	0x20020000
 8000504:	2001fc00 	.word	0x2001fc00
 8000508:	2001f800 	.word	0x2001f800
 800050c:	2001f400 	.word	0x2001f400
 8000510:	08000315 	.word	0x08000315
 8000514:	08000339 	.word	0x08000339
 8000518:	0800035d 	.word	0x0800035d
 800051c:	08000381 	.word	0x08000381

08000520 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	return user_task[current_task].psp_value;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <get_psp_value+0x1c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <get_psp_value+0x20>)
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	4413      	add	r3, r2
 800052e:	681b      	ldr	r3, [r3, #0]
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000080 	.word	0x20000080
 8000540:	20000090 	.word	0x20000090

08000544 <switch_sp_to_psp>:
__attribute ((naked)) void switch_sp_to_psp(void)
{
	//1. Initialize the PSP with Task1 stack start address.

	//Get the value of the PSP of the current task.
	__asm volatile ("PUSH {LR}"); //Preserve LR into stack, which connects back to main()
 8000544:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000546:	f7ff ffeb 	bl	8000520 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //Initialize PSP.
 800054a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // Pops back LR value.
 800054e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Change SP to PSP using Control register.
	__asm volatile ("MOV R0,#0x02");
 8000552:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 8000556:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800055a:	4770      	bx	lr
}
 800055c:	bf00      	nop
	...

08000560 <enable_precessor_faults>:


void enable_precessor_faults(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
    //1. Enable all configurable fault exceptions like usage fault, mem manage fault and bus fault.
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <enable_precessor_faults+0x3c>)
 8000568:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1<<16); //Activate mem manage fault.
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17); //Activate bus fault.
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18); //Activate usage fault.
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed24 	.word	0xe000ed24

080005a0 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	user_task[current_task].psp_value = current_psp_value;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <save_psp_value+0x24>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <save_psp_value+0x28>)
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	4413      	add	r3, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000080 	.word	0x20000080
 80005c8:	20000090 	.word	0x20000090

080005cc <update_next_task>:


void update_next_task(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	current_task++;
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <update_next_task+0x28>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <update_next_task+0x28>)
 80005da:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASK;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <update_next_task+0x28>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <update_next_task+0x28>)
 80005e8:	701a      	strb	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	20000080 	.word	0x20000080

080005f8 <SysTick_Handler>:
__attribute ((naked)) void SysTick_Handler(void)
{
	/*Save the context of the current task*/

	//1. Get current running task's PSP value.
	__asm volatile ("MRS R0,PSP");
 80005f8:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2(R4 to R11).
	__asm volatile ("STMDB R0!,{R4-R11}");
 80005fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//First we have to save the LR value of the calling function before call any function.
	__asm volatile ("PUSH {LR}");
 8000600:	b500      	push	{lr}

	//3. Save the current current value of the PSP.
	__asm volatile ("BL save_psp_value");
 8000602:	f7ff ffcd 	bl	80005a0 <save_psp_value>

	/*Retrieve the context of the next task*/

	//1. Decide next task to run.
	__asm volatile ("BL update_next_task");
 8000606:	f7ff ffe1 	bl	80005cc <update_next_task>

	//2. Get its past PSP value.
	__asm volatile ("BL get_psp_value");
 800060a:	f7ff ff89 	bl	8000520 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11).
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800060e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. Update PSP and exit.
	__asm volatile ("MSR PSP,R0");
 8000612:	f380 8809 	msr	PSP, r0

	//After function call we have to POP back the LR value.
	__asm volatile ("POP {LR}");
 8000616:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR");
 800061a:	4770      	bx	lr
}
 800061c:	bf00      	nop
	...

08000620 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	printf("Fault : HardFault_Handler\n");
 8000624:	4801      	ldr	r0, [pc, #4]	; (800062c <HardFault_Handler+0xc>)
 8000626:	f000 f99f 	bl	8000968 <puts>
	while(1);
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0xa>
 800062c:	08001198 	.word	0x08001198

08000630 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	printf("Fault : MemManage_Handler\n");
 8000634:	4801      	ldr	r0, [pc, #4]	; (800063c <MemManage_Handler+0xc>)
 8000636:	f000 f997 	bl	8000968 <puts>
	while(1);
 800063a:	e7fe      	b.n	800063a <MemManage_Handler+0xa>
 800063c:	080011b4 	.word	0x080011b4

08000640 <BusFault_Handler>:
}


void BusFault_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	printf("Fault : BusFault_Handler\n");
 8000644:	4801      	ldr	r0, [pc, #4]	; (800064c <BusFault_Handler+0xc>)
 8000646:	f000 f98f 	bl	8000968 <puts>
	while(1);
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0xa>
 800064c:	080011d0 	.word	0x080011d0

08000650 <UsageFault_Handler>:
}


void UsageFault_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	printf("Fault : UsageFault_Handler\n");
 8000654:	4801      	ldr	r0, [pc, #4]	; (800065c <UsageFault_Handler+0xc>)
 8000656:	f000 f987 	bl	8000968 <puts>
	while(1);
 800065a:	e7fe      	b.n	800065a <UsageFault_Handler+0xa>
 800065c:	080011ec 	.word	0x080011ec

08000660 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ITM_SendChar+0x48>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <ITM_SendChar+0x48>)
 8000670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000674:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <ITM_SendChar+0x4c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <ITM_SendChar+0x4c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000682:	bf00      	nop
 8000684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f8      	beq.n	8000684 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000edfc 	.word	0xe000edfc
 80006ac:	e0000e00 	.word	0xe0000e00

080006b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	e00a      	b.n	80006d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c2:	f3af 8000 	nop.w
 80006c6:	4601      	mov	r1, r0
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	60ba      	str	r2, [r7, #8]
 80006ce:	b2ca      	uxtb	r2, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	3301      	adds	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	429a      	cmp	r2, r3
 80006de:	dbf0      	blt.n	80006c2 <_read+0x12>
	}

return len;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffab 	bl	8000660 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
	}
	return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_close>:

int _close(int file)
{
 8000722:	b480      	push	{r7}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	return -1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074a:	605a      	str	r2, [r3, #4]
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <_isatty>:

int _isatty(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	return 1;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	return 0;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000794:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <_sbrk+0x5c>)
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <_sbrk+0x60>)
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <_sbrk+0x64>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <_sbrk+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <_sbrk+0x64>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d207      	bcs.n	80007cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007bc:	f000 f846 	bl	800084c <__errno>
 80007c0:	4602      	mov	r2, r0
 80007c2:	230c      	movs	r3, #12
 80007c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ca:	e009      	b.n	80007e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <_sbrk+0x64>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <_sbrk+0x64>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <_sbrk+0x64>)
 80007dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20020000 	.word	0x20020000
 80007ec:	00000400 	.word	0x00000400
 80007f0:	20000084 	.word	0x20000084
 80007f4:	200000d8 	.word	0x200000d8

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000826:	f000 f817 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fd5d 	bl	80002e8 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   r0, =_estack
 8000830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800083c:	08001274 	.word	0x08001274
  ldr r2, =_sbss
 8000840:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000844:	200000d4 	.word	0x200000d4

08000848 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC_IRQHandler>
	...

0800084c <__errno>:
 800084c:	4b01      	ldr	r3, [pc, #4]	; (8000854 <__errno+0x8>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	4e0d      	ldr	r6, [pc, #52]	; (8000890 <__libc_init_array+0x38>)
 800085c:	4c0d      	ldr	r4, [pc, #52]	; (8000894 <__libc_init_array+0x3c>)
 800085e:	1ba4      	subs	r4, r4, r6
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	2500      	movs	r5, #0
 8000864:	42a5      	cmp	r5, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	4e0b      	ldr	r6, [pc, #44]	; (8000898 <__libc_init_array+0x40>)
 800086a:	4c0c      	ldr	r4, [pc, #48]	; (800089c <__libc_init_array+0x44>)
 800086c:	f000 fc88 	bl	8001180 <_init>
 8000870:	1ba4      	subs	r4, r4, r6
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	2500      	movs	r5, #0
 8000876:	42a5      	cmp	r5, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000880:	4798      	blx	r3
 8000882:	3501      	adds	r5, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800088a:	4798      	blx	r3
 800088c:	3501      	adds	r5, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	0800126c 	.word	0x0800126c
 8000894:	0800126c 	.word	0x0800126c
 8000898:	0800126c 	.word	0x0800126c
 800089c:	08001270 	.word	0x08001270

080008a0 <memset>:
 80008a0:	4402      	add	r2, r0
 80008a2:	4603      	mov	r3, r0
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d100      	bne.n	80008aa <memset+0xa>
 80008a8:	4770      	bx	lr
 80008aa:	f803 1b01 	strb.w	r1, [r3], #1
 80008ae:	e7f9      	b.n	80008a4 <memset+0x4>

080008b0 <_puts_r>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	460e      	mov	r6, r1
 80008b4:	4605      	mov	r5, r0
 80008b6:	b118      	cbz	r0, 80008c0 <_puts_r+0x10>
 80008b8:	6983      	ldr	r3, [r0, #24]
 80008ba:	b90b      	cbnz	r3, 80008c0 <_puts_r+0x10>
 80008bc:	f000 fa0c 	bl	8000cd8 <__sinit>
 80008c0:	69ab      	ldr	r3, [r5, #24]
 80008c2:	68ac      	ldr	r4, [r5, #8]
 80008c4:	b913      	cbnz	r3, 80008cc <_puts_r+0x1c>
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 fa06 	bl	8000cd8 <__sinit>
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <_puts_r+0xac>)
 80008ce:	429c      	cmp	r4, r3
 80008d0:	d117      	bne.n	8000902 <_puts_r+0x52>
 80008d2:	686c      	ldr	r4, [r5, #4]
 80008d4:	89a3      	ldrh	r3, [r4, #12]
 80008d6:	071b      	lsls	r3, r3, #28
 80008d8:	d51d      	bpl.n	8000916 <_puts_r+0x66>
 80008da:	6923      	ldr	r3, [r4, #16]
 80008dc:	b1db      	cbz	r3, 8000916 <_puts_r+0x66>
 80008de:	3e01      	subs	r6, #1
 80008e0:	68a3      	ldr	r3, [r4, #8]
 80008e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008e6:	3b01      	subs	r3, #1
 80008e8:	60a3      	str	r3, [r4, #8]
 80008ea:	b9e9      	cbnz	r1, 8000928 <_puts_r+0x78>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	da2e      	bge.n	800094e <_puts_r+0x9e>
 80008f0:	4622      	mov	r2, r4
 80008f2:	210a      	movs	r1, #10
 80008f4:	4628      	mov	r0, r5
 80008f6:	f000 f83f 	bl	8000978 <__swbuf_r>
 80008fa:	3001      	adds	r0, #1
 80008fc:	d011      	beq.n	8000922 <_puts_r+0x72>
 80008fe:	200a      	movs	r0, #10
 8000900:	e011      	b.n	8000926 <_puts_r+0x76>
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <_puts_r+0xb0>)
 8000904:	429c      	cmp	r4, r3
 8000906:	d101      	bne.n	800090c <_puts_r+0x5c>
 8000908:	68ac      	ldr	r4, [r5, #8]
 800090a:	e7e3      	b.n	80008d4 <_puts_r+0x24>
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <_puts_r+0xb4>)
 800090e:	429c      	cmp	r4, r3
 8000910:	bf08      	it	eq
 8000912:	68ec      	ldreq	r4, [r5, #12]
 8000914:	e7de      	b.n	80008d4 <_puts_r+0x24>
 8000916:	4621      	mov	r1, r4
 8000918:	4628      	mov	r0, r5
 800091a:	f000 f87f 	bl	8000a1c <__swsetup_r>
 800091e:	2800      	cmp	r0, #0
 8000920:	d0dd      	beq.n	80008de <_puts_r+0x2e>
 8000922:	f04f 30ff 	mov.w	r0, #4294967295
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	da04      	bge.n	8000936 <_puts_r+0x86>
 800092c:	69a2      	ldr	r2, [r4, #24]
 800092e:	429a      	cmp	r2, r3
 8000930:	dc06      	bgt.n	8000940 <_puts_r+0x90>
 8000932:	290a      	cmp	r1, #10
 8000934:	d004      	beq.n	8000940 <_puts_r+0x90>
 8000936:	6823      	ldr	r3, [r4, #0]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	6022      	str	r2, [r4, #0]
 800093c:	7019      	strb	r1, [r3, #0]
 800093e:	e7cf      	b.n	80008e0 <_puts_r+0x30>
 8000940:	4622      	mov	r2, r4
 8000942:	4628      	mov	r0, r5
 8000944:	f000 f818 	bl	8000978 <__swbuf_r>
 8000948:	3001      	adds	r0, #1
 800094a:	d1c9      	bne.n	80008e0 <_puts_r+0x30>
 800094c:	e7e9      	b.n	8000922 <_puts_r+0x72>
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	200a      	movs	r0, #10
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	6022      	str	r2, [r4, #0]
 8000956:	7018      	strb	r0, [r3, #0]
 8000958:	e7e5      	b.n	8000926 <_puts_r+0x76>
 800095a:	bf00      	nop
 800095c:	0800122c 	.word	0x0800122c
 8000960:	0800124c 	.word	0x0800124c
 8000964:	0800120c 	.word	0x0800120c

08000968 <puts>:
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <puts+0xc>)
 800096a:	4601      	mov	r1, r0
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f7ff bf9f 	b.w	80008b0 <_puts_r>
 8000972:	bf00      	nop
 8000974:	20000000 	.word	0x20000000

08000978 <__swbuf_r>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	460e      	mov	r6, r1
 800097c:	4614      	mov	r4, r2
 800097e:	4605      	mov	r5, r0
 8000980:	b118      	cbz	r0, 800098a <__swbuf_r+0x12>
 8000982:	6983      	ldr	r3, [r0, #24]
 8000984:	b90b      	cbnz	r3, 800098a <__swbuf_r+0x12>
 8000986:	f000 f9a7 	bl	8000cd8 <__sinit>
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <__swbuf_r+0x98>)
 800098c:	429c      	cmp	r4, r3
 800098e:	d12a      	bne.n	80009e6 <__swbuf_r+0x6e>
 8000990:	686c      	ldr	r4, [r5, #4]
 8000992:	69a3      	ldr	r3, [r4, #24]
 8000994:	60a3      	str	r3, [r4, #8]
 8000996:	89a3      	ldrh	r3, [r4, #12]
 8000998:	071a      	lsls	r2, r3, #28
 800099a:	d52e      	bpl.n	80009fa <__swbuf_r+0x82>
 800099c:	6923      	ldr	r3, [r4, #16]
 800099e:	b363      	cbz	r3, 80009fa <__swbuf_r+0x82>
 80009a0:	6923      	ldr	r3, [r4, #16]
 80009a2:	6820      	ldr	r0, [r4, #0]
 80009a4:	1ac0      	subs	r0, r0, r3
 80009a6:	6963      	ldr	r3, [r4, #20]
 80009a8:	b2f6      	uxtb	r6, r6
 80009aa:	4283      	cmp	r3, r0
 80009ac:	4637      	mov	r7, r6
 80009ae:	dc04      	bgt.n	80009ba <__swbuf_r+0x42>
 80009b0:	4621      	mov	r1, r4
 80009b2:	4628      	mov	r0, r5
 80009b4:	f000 f926 	bl	8000c04 <_fflush_r>
 80009b8:	bb28      	cbnz	r0, 8000a06 <__swbuf_r+0x8e>
 80009ba:	68a3      	ldr	r3, [r4, #8]
 80009bc:	3b01      	subs	r3, #1
 80009be:	60a3      	str	r3, [r4, #8]
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	6022      	str	r2, [r4, #0]
 80009c6:	701e      	strb	r6, [r3, #0]
 80009c8:	6963      	ldr	r3, [r4, #20]
 80009ca:	3001      	adds	r0, #1
 80009cc:	4283      	cmp	r3, r0
 80009ce:	d004      	beq.n	80009da <__swbuf_r+0x62>
 80009d0:	89a3      	ldrh	r3, [r4, #12]
 80009d2:	07db      	lsls	r3, r3, #31
 80009d4:	d519      	bpl.n	8000a0a <__swbuf_r+0x92>
 80009d6:	2e0a      	cmp	r6, #10
 80009d8:	d117      	bne.n	8000a0a <__swbuf_r+0x92>
 80009da:	4621      	mov	r1, r4
 80009dc:	4628      	mov	r0, r5
 80009de:	f000 f911 	bl	8000c04 <_fflush_r>
 80009e2:	b190      	cbz	r0, 8000a0a <__swbuf_r+0x92>
 80009e4:	e00f      	b.n	8000a06 <__swbuf_r+0x8e>
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <__swbuf_r+0x9c>)
 80009e8:	429c      	cmp	r4, r3
 80009ea:	d101      	bne.n	80009f0 <__swbuf_r+0x78>
 80009ec:	68ac      	ldr	r4, [r5, #8]
 80009ee:	e7d0      	b.n	8000992 <__swbuf_r+0x1a>
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <__swbuf_r+0xa0>)
 80009f2:	429c      	cmp	r4, r3
 80009f4:	bf08      	it	eq
 80009f6:	68ec      	ldreq	r4, [r5, #12]
 80009f8:	e7cb      	b.n	8000992 <__swbuf_r+0x1a>
 80009fa:	4621      	mov	r1, r4
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f80d 	bl	8000a1c <__swsetup_r>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d0cc      	beq.n	80009a0 <__swbuf_r+0x28>
 8000a06:	f04f 37ff 	mov.w	r7, #4294967295
 8000a0a:	4638      	mov	r0, r7
 8000a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800122c 	.word	0x0800122c
 8000a14:	0800124c 	.word	0x0800124c
 8000a18:	0800120c 	.word	0x0800120c

08000a1c <__swsetup_r>:
 8000a1c:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <__swsetup_r+0xcc>)
 8000a1e:	b570      	push	{r4, r5, r6, lr}
 8000a20:	681d      	ldr	r5, [r3, #0]
 8000a22:	4606      	mov	r6, r0
 8000a24:	460c      	mov	r4, r1
 8000a26:	b125      	cbz	r5, 8000a32 <__swsetup_r+0x16>
 8000a28:	69ab      	ldr	r3, [r5, #24]
 8000a2a:	b913      	cbnz	r3, 8000a32 <__swsetup_r+0x16>
 8000a2c:	4628      	mov	r0, r5
 8000a2e:	f000 f953 	bl	8000cd8 <__sinit>
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <__swsetup_r+0xd0>)
 8000a34:	429c      	cmp	r4, r3
 8000a36:	d10f      	bne.n	8000a58 <__swsetup_r+0x3c>
 8000a38:	686c      	ldr	r4, [r5, #4]
 8000a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	0715      	lsls	r5, r2, #28
 8000a42:	d42c      	bmi.n	8000a9e <__swsetup_r+0x82>
 8000a44:	06d0      	lsls	r0, r2, #27
 8000a46:	d411      	bmi.n	8000a6c <__swsetup_r+0x50>
 8000a48:	2209      	movs	r2, #9
 8000a4a:	6032      	str	r2, [r6, #0]
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	81a3      	strh	r3, [r4, #12]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	e03e      	b.n	8000ad6 <__swsetup_r+0xba>
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <__swsetup_r+0xd4>)
 8000a5a:	429c      	cmp	r4, r3
 8000a5c:	d101      	bne.n	8000a62 <__swsetup_r+0x46>
 8000a5e:	68ac      	ldr	r4, [r5, #8]
 8000a60:	e7eb      	b.n	8000a3a <__swsetup_r+0x1e>
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <__swsetup_r+0xd8>)
 8000a64:	429c      	cmp	r4, r3
 8000a66:	bf08      	it	eq
 8000a68:	68ec      	ldreq	r4, [r5, #12]
 8000a6a:	e7e6      	b.n	8000a3a <__swsetup_r+0x1e>
 8000a6c:	0751      	lsls	r1, r2, #29
 8000a6e:	d512      	bpl.n	8000a96 <__swsetup_r+0x7a>
 8000a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a72:	b141      	cbz	r1, 8000a86 <__swsetup_r+0x6a>
 8000a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a78:	4299      	cmp	r1, r3
 8000a7a:	d002      	beq.n	8000a82 <__swsetup_r+0x66>
 8000a7c:	4630      	mov	r0, r6
 8000a7e:	f000 fa19 	bl	8000eb4 <_free_r>
 8000a82:	2300      	movs	r3, #0
 8000a84:	6363      	str	r3, [r4, #52]	; 0x34
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a8c:	81a3      	strh	r3, [r4, #12]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	6063      	str	r3, [r4, #4]
 8000a92:	6923      	ldr	r3, [r4, #16]
 8000a94:	6023      	str	r3, [r4, #0]
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	81a3      	strh	r3, [r4, #12]
 8000a9e:	6923      	ldr	r3, [r4, #16]
 8000aa0:	b94b      	cbnz	r3, 8000ab6 <__swsetup_r+0x9a>
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aac:	d003      	beq.n	8000ab6 <__swsetup_r+0x9a>
 8000aae:	4621      	mov	r1, r4
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 f9bf 	bl	8000e34 <__smakebuf_r>
 8000ab6:	89a2      	ldrh	r2, [r4, #12]
 8000ab8:	f012 0301 	ands.w	r3, r2, #1
 8000abc:	d00c      	beq.n	8000ad8 <__swsetup_r+0xbc>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60a3      	str	r3, [r4, #8]
 8000ac2:	6963      	ldr	r3, [r4, #20]
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	61a3      	str	r3, [r4, #24]
 8000ac8:	6923      	ldr	r3, [r4, #16]
 8000aca:	b953      	cbnz	r3, 8000ae2 <__swsetup_r+0xc6>
 8000acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ad0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000ad4:	d1ba      	bne.n	8000a4c <__swsetup_r+0x30>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	0792      	lsls	r2, r2, #30
 8000ada:	bf58      	it	pl
 8000adc:	6963      	ldrpl	r3, [r4, #20]
 8000ade:	60a3      	str	r3, [r4, #8]
 8000ae0:	e7f2      	b.n	8000ac8 <__swsetup_r+0xac>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7f7      	b.n	8000ad6 <__swsetup_r+0xba>
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	0800122c 	.word	0x0800122c
 8000af0:	0800124c 	.word	0x0800124c
 8000af4:	0800120c 	.word	0x0800120c

08000af8 <__sflush_r>:
 8000af8:	898a      	ldrh	r2, [r1, #12]
 8000afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afe:	4605      	mov	r5, r0
 8000b00:	0710      	lsls	r0, r2, #28
 8000b02:	460c      	mov	r4, r1
 8000b04:	d458      	bmi.n	8000bb8 <__sflush_r+0xc0>
 8000b06:	684b      	ldr	r3, [r1, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dc05      	bgt.n	8000b18 <__sflush_r+0x20>
 8000b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	dc02      	bgt.n	8000b18 <__sflush_r+0x20>
 8000b12:	2000      	movs	r0, #0
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d0f9      	beq.n	8000b12 <__sflush_r+0x1a>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b24:	682f      	ldr	r7, [r5, #0]
 8000b26:	6a21      	ldr	r1, [r4, #32]
 8000b28:	602b      	str	r3, [r5, #0]
 8000b2a:	d032      	beq.n	8000b92 <__sflush_r+0x9a>
 8000b2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b2e:	89a3      	ldrh	r3, [r4, #12]
 8000b30:	075a      	lsls	r2, r3, #29
 8000b32:	d505      	bpl.n	8000b40 <__sflush_r+0x48>
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	1ac0      	subs	r0, r0, r3
 8000b38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b3a:	b10b      	cbz	r3, 8000b40 <__sflush_r+0x48>
 8000b3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b3e:	1ac0      	subs	r0, r0, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	4602      	mov	r2, r0
 8000b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b46:	6a21      	ldr	r1, [r4, #32]
 8000b48:	4628      	mov	r0, r5
 8000b4a:	47b0      	blx	r6
 8000b4c:	1c43      	adds	r3, r0, #1
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	d106      	bne.n	8000b60 <__sflush_r+0x68>
 8000b52:	6829      	ldr	r1, [r5, #0]
 8000b54:	291d      	cmp	r1, #29
 8000b56:	d848      	bhi.n	8000bea <__sflush_r+0xf2>
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <__sflush_r+0x108>)
 8000b5a:	40ca      	lsrs	r2, r1
 8000b5c:	07d6      	lsls	r6, r2, #31
 8000b5e:	d544      	bpl.n	8000bea <__sflush_r+0xf2>
 8000b60:	2200      	movs	r2, #0
 8000b62:	6062      	str	r2, [r4, #4]
 8000b64:	04d9      	lsls	r1, r3, #19
 8000b66:	6922      	ldr	r2, [r4, #16]
 8000b68:	6022      	str	r2, [r4, #0]
 8000b6a:	d504      	bpl.n	8000b76 <__sflush_r+0x7e>
 8000b6c:	1c42      	adds	r2, r0, #1
 8000b6e:	d101      	bne.n	8000b74 <__sflush_r+0x7c>
 8000b70:	682b      	ldr	r3, [r5, #0]
 8000b72:	b903      	cbnz	r3, 8000b76 <__sflush_r+0x7e>
 8000b74:	6560      	str	r0, [r4, #84]	; 0x54
 8000b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b78:	602f      	str	r7, [r5, #0]
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d0c9      	beq.n	8000b12 <__sflush_r+0x1a>
 8000b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d002      	beq.n	8000b8c <__sflush_r+0x94>
 8000b86:	4628      	mov	r0, r5
 8000b88:	f000 f994 	bl	8000eb4 <_free_r>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	6360      	str	r0, [r4, #52]	; 0x34
 8000b90:	e7c0      	b.n	8000b14 <__sflush_r+0x1c>
 8000b92:	2301      	movs	r3, #1
 8000b94:	4628      	mov	r0, r5
 8000b96:	47b0      	blx	r6
 8000b98:	1c41      	adds	r1, r0, #1
 8000b9a:	d1c8      	bne.n	8000b2e <__sflush_r+0x36>
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0c5      	beq.n	8000b2e <__sflush_r+0x36>
 8000ba2:	2b1d      	cmp	r3, #29
 8000ba4:	d001      	beq.n	8000baa <__sflush_r+0xb2>
 8000ba6:	2b16      	cmp	r3, #22
 8000ba8:	d101      	bne.n	8000bae <__sflush_r+0xb6>
 8000baa:	602f      	str	r7, [r5, #0]
 8000bac:	e7b1      	b.n	8000b12 <__sflush_r+0x1a>
 8000bae:	89a3      	ldrh	r3, [r4, #12]
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb4:	81a3      	strh	r3, [r4, #12]
 8000bb6:	e7ad      	b.n	8000b14 <__sflush_r+0x1c>
 8000bb8:	690f      	ldr	r7, [r1, #16]
 8000bba:	2f00      	cmp	r7, #0
 8000bbc:	d0a9      	beq.n	8000b12 <__sflush_r+0x1a>
 8000bbe:	0793      	lsls	r3, r2, #30
 8000bc0:	680e      	ldr	r6, [r1, #0]
 8000bc2:	bf08      	it	eq
 8000bc4:	694b      	ldreq	r3, [r1, #20]
 8000bc6:	600f      	str	r7, [r1, #0]
 8000bc8:	bf18      	it	ne
 8000bca:	2300      	movne	r3, #0
 8000bcc:	eba6 0807 	sub.w	r8, r6, r7
 8000bd0:	608b      	str	r3, [r1, #8]
 8000bd2:	f1b8 0f00 	cmp.w	r8, #0
 8000bd6:	dd9c      	ble.n	8000b12 <__sflush_r+0x1a>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	463a      	mov	r2, r7
 8000bdc:	6a21      	ldr	r1, [r4, #32]
 8000bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000be0:	4628      	mov	r0, r5
 8000be2:	47b0      	blx	r6
 8000be4:	2800      	cmp	r0, #0
 8000be6:	dc06      	bgt.n	8000bf6 <__sflush_r+0xfe>
 8000be8:	89a3      	ldrh	r3, [r4, #12]
 8000bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bee:	81a3      	strh	r3, [r4, #12]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	e78e      	b.n	8000b14 <__sflush_r+0x1c>
 8000bf6:	4407      	add	r7, r0
 8000bf8:	eba8 0800 	sub.w	r8, r8, r0
 8000bfc:	e7e9      	b.n	8000bd2 <__sflush_r+0xda>
 8000bfe:	bf00      	nop
 8000c00:	20400001 	.word	0x20400001

08000c04 <_fflush_r>:
 8000c04:	b538      	push	{r3, r4, r5, lr}
 8000c06:	690b      	ldr	r3, [r1, #16]
 8000c08:	4605      	mov	r5, r0
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	b1db      	cbz	r3, 8000c46 <_fflush_r+0x42>
 8000c0e:	b118      	cbz	r0, 8000c18 <_fflush_r+0x14>
 8000c10:	6983      	ldr	r3, [r0, #24]
 8000c12:	b90b      	cbnz	r3, 8000c18 <_fflush_r+0x14>
 8000c14:	f000 f860 	bl	8000cd8 <__sinit>
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <_fflush_r+0x48>)
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	d109      	bne.n	8000c32 <_fflush_r+0x2e>
 8000c1e:	686c      	ldr	r4, [r5, #4]
 8000c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c24:	b17b      	cbz	r3, 8000c46 <_fflush_r+0x42>
 8000c26:	4621      	mov	r1, r4
 8000c28:	4628      	mov	r0, r5
 8000c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c2e:	f7ff bf63 	b.w	8000af8 <__sflush_r>
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_fflush_r+0x4c>)
 8000c34:	429c      	cmp	r4, r3
 8000c36:	d101      	bne.n	8000c3c <_fflush_r+0x38>
 8000c38:	68ac      	ldr	r4, [r5, #8]
 8000c3a:	e7f1      	b.n	8000c20 <_fflush_r+0x1c>
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_fflush_r+0x50>)
 8000c3e:	429c      	cmp	r4, r3
 8000c40:	bf08      	it	eq
 8000c42:	68ec      	ldreq	r4, [r5, #12]
 8000c44:	e7ec      	b.n	8000c20 <_fflush_r+0x1c>
 8000c46:	2000      	movs	r0, #0
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop
 8000c4c:	0800122c 	.word	0x0800122c
 8000c50:	0800124c 	.word	0x0800124c
 8000c54:	0800120c 	.word	0x0800120c

08000c58 <std>:
 8000c58:	2300      	movs	r3, #0
 8000c5a:	b510      	push	{r4, lr}
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c62:	6083      	str	r3, [r0, #8]
 8000c64:	8181      	strh	r1, [r0, #12]
 8000c66:	6643      	str	r3, [r0, #100]	; 0x64
 8000c68:	81c2      	strh	r2, [r0, #14]
 8000c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c6e:	6183      	str	r3, [r0, #24]
 8000c70:	4619      	mov	r1, r3
 8000c72:	2208      	movs	r2, #8
 8000c74:	305c      	adds	r0, #92	; 0x5c
 8000c76:	f7ff fe13 	bl	80008a0 <memset>
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <std+0x38>)
 8000c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <std+0x3c>)
 8000c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <std+0x40>)
 8000c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <std+0x44>)
 8000c88:	6224      	str	r4, [r4, #32]
 8000c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c8c:	bd10      	pop	{r4, pc}
 8000c8e:	bf00      	nop
 8000c90:	08001025 	.word	0x08001025
 8000c94:	08001047 	.word	0x08001047
 8000c98:	0800107f 	.word	0x0800107f
 8000c9c:	080010a3 	.word	0x080010a3

08000ca0 <_cleanup_r>:
 8000ca0:	4901      	ldr	r1, [pc, #4]	; (8000ca8 <_cleanup_r+0x8>)
 8000ca2:	f000 b885 	b.w	8000db0 <_fwalk_reent>
 8000ca6:	bf00      	nop
 8000ca8:	08000c05 	.word	0x08000c05

08000cac <__sfmoreglue>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	1e4a      	subs	r2, r1, #1
 8000cb0:	2568      	movs	r5, #104	; 0x68
 8000cb2:	4355      	muls	r5, r2
 8000cb4:	460e      	mov	r6, r1
 8000cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cba:	f000 f949 	bl	8000f50 <_malloc_r>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b140      	cbz	r0, 8000cd4 <__sfmoreglue+0x28>
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8000cc8:	300c      	adds	r0, #12
 8000cca:	60a0      	str	r0, [r4, #8]
 8000ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cd0:	f7ff fde6 	bl	80008a0 <memset>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}

08000cd8 <__sinit>:
 8000cd8:	6983      	ldr	r3, [r0, #24]
 8000cda:	b510      	push	{r4, lr}
 8000cdc:	4604      	mov	r4, r0
 8000cde:	bb33      	cbnz	r3, 8000d2e <__sinit+0x56>
 8000ce0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000ce4:	6503      	str	r3, [r0, #80]	; 0x50
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <__sinit+0x58>)
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <__sinit+0x5c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6282      	str	r2, [r0, #40]	; 0x28
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	bf04      	itt	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	6183      	streq	r3, [r0, #24]
 8000cf6:	f000 f81f 	bl	8000d38 <__sfp>
 8000cfa:	6060      	str	r0, [r4, #4]
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f000 f81b 	bl	8000d38 <__sfp>
 8000d02:	60a0      	str	r0, [r4, #8]
 8000d04:	4620      	mov	r0, r4
 8000d06:	f000 f817 	bl	8000d38 <__sfp>
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60e0      	str	r0, [r4, #12]
 8000d0e:	2104      	movs	r1, #4
 8000d10:	6860      	ldr	r0, [r4, #4]
 8000d12:	f7ff ffa1 	bl	8000c58 <std>
 8000d16:	2201      	movs	r2, #1
 8000d18:	2109      	movs	r1, #9
 8000d1a:	68a0      	ldr	r0, [r4, #8]
 8000d1c:	f7ff ff9c 	bl	8000c58 <std>
 8000d20:	2202      	movs	r2, #2
 8000d22:	2112      	movs	r1, #18
 8000d24:	68e0      	ldr	r0, [r4, #12]
 8000d26:	f7ff ff97 	bl	8000c58 <std>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61a3      	str	r3, [r4, #24]
 8000d2e:	bd10      	pop	{r4, pc}
 8000d30:	08001208 	.word	0x08001208
 8000d34:	08000ca1 	.word	0x08000ca1

08000d38 <__sfp>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <__sfp+0x70>)
 8000d3c:	681e      	ldr	r6, [r3, #0]
 8000d3e:	69b3      	ldr	r3, [r6, #24]
 8000d40:	4607      	mov	r7, r0
 8000d42:	b913      	cbnz	r3, 8000d4a <__sfp+0x12>
 8000d44:	4630      	mov	r0, r6
 8000d46:	f7ff ffc7 	bl	8000cd8 <__sinit>
 8000d4a:	3648      	adds	r6, #72	; 0x48
 8000d4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	d503      	bpl.n	8000d5c <__sfp+0x24>
 8000d54:	6833      	ldr	r3, [r6, #0]
 8000d56:	b133      	cbz	r3, 8000d66 <__sfp+0x2e>
 8000d58:	6836      	ldr	r6, [r6, #0]
 8000d5a:	e7f7      	b.n	8000d4c <__sfp+0x14>
 8000d5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d60:	b16d      	cbz	r5, 8000d7e <__sfp+0x46>
 8000d62:	3468      	adds	r4, #104	; 0x68
 8000d64:	e7f4      	b.n	8000d50 <__sfp+0x18>
 8000d66:	2104      	movs	r1, #4
 8000d68:	4638      	mov	r0, r7
 8000d6a:	f7ff ff9f 	bl	8000cac <__sfmoreglue>
 8000d6e:	6030      	str	r0, [r6, #0]
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d1f1      	bne.n	8000d58 <__sfp+0x20>
 8000d74:	230c      	movs	r3, #12
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	4604      	mov	r4, r0
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <__sfp+0x74>)
 8000d80:	6665      	str	r5, [r4, #100]	; 0x64
 8000d82:	e9c4 5500 	strd	r5, r5, [r4]
 8000d86:	60a5      	str	r5, [r4, #8]
 8000d88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000d8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000d90:	2208      	movs	r2, #8
 8000d92:	4629      	mov	r1, r5
 8000d94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d98:	f7ff fd82 	bl	80008a0 <memset>
 8000d9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000da0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000da4:	e7e9      	b.n	8000d7a <__sfp+0x42>
 8000da6:	bf00      	nop
 8000da8:	08001208 	.word	0x08001208
 8000dac:	ffff0001 	.word	0xffff0001

08000db0 <_fwalk_reent>:
 8000db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000db4:	4680      	mov	r8, r0
 8000db6:	4689      	mov	r9, r1
 8000db8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b914      	cbnz	r4, 8000dc6 <_fwalk_reent+0x16>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000dca:	3f01      	subs	r7, #1
 8000dcc:	d501      	bpl.n	8000dd2 <_fwalk_reent+0x22>
 8000dce:	6824      	ldr	r4, [r4, #0]
 8000dd0:	e7f5      	b.n	8000dbe <_fwalk_reent+0xe>
 8000dd2:	89ab      	ldrh	r3, [r5, #12]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d907      	bls.n	8000de8 <_fwalk_reent+0x38>
 8000dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	d003      	beq.n	8000de8 <_fwalk_reent+0x38>
 8000de0:	4629      	mov	r1, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	47c8      	blx	r9
 8000de6:	4306      	orrs	r6, r0
 8000de8:	3568      	adds	r5, #104	; 0x68
 8000dea:	e7ee      	b.n	8000dca <_fwalk_reent+0x1a>

08000dec <__swhatbuf_r>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	460e      	mov	r6, r1
 8000df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000df4:	2900      	cmp	r1, #0
 8000df6:	b096      	sub	sp, #88	; 0x58
 8000df8:	4614      	mov	r4, r2
 8000dfa:	461d      	mov	r5, r3
 8000dfc:	da07      	bge.n	8000e0e <__swhatbuf_r+0x22>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	602b      	str	r3, [r5, #0]
 8000e02:	89b3      	ldrh	r3, [r6, #12]
 8000e04:	061a      	lsls	r2, r3, #24
 8000e06:	d410      	bmi.n	8000e2a <__swhatbuf_r+0x3e>
 8000e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0c:	e00e      	b.n	8000e2c <__swhatbuf_r+0x40>
 8000e0e:	466a      	mov	r2, sp
 8000e10:	f000 f96e 	bl	80010f0 <_fstat_r>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	dbf2      	blt.n	8000dfe <__swhatbuf_r+0x12>
 8000e18:	9a01      	ldr	r2, [sp, #4]
 8000e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e22:	425a      	negs	r2, r3
 8000e24:	415a      	adcs	r2, r3
 8000e26:	602a      	str	r2, [r5, #0]
 8000e28:	e7ee      	b.n	8000e08 <__swhatbuf_r+0x1c>
 8000e2a:	2340      	movs	r3, #64	; 0x40
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	6023      	str	r3, [r4, #0]
 8000e30:	b016      	add	sp, #88	; 0x58
 8000e32:	bd70      	pop	{r4, r5, r6, pc}

08000e34 <__smakebuf_r>:
 8000e34:	898b      	ldrh	r3, [r1, #12]
 8000e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e38:	079d      	lsls	r5, r3, #30
 8000e3a:	4606      	mov	r6, r0
 8000e3c:	460c      	mov	r4, r1
 8000e3e:	d507      	bpl.n	8000e50 <__smakebuf_r+0x1c>
 8000e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e44:	6023      	str	r3, [r4, #0]
 8000e46:	6123      	str	r3, [r4, #16]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	6163      	str	r3, [r4, #20]
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	ab01      	add	r3, sp, #4
 8000e52:	466a      	mov	r2, sp
 8000e54:	f7ff ffca 	bl	8000dec <__swhatbuf_r>
 8000e58:	9900      	ldr	r1, [sp, #0]
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f877 	bl	8000f50 <_malloc_r>
 8000e62:	b948      	cbnz	r0, 8000e78 <__smakebuf_r+0x44>
 8000e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e68:	059a      	lsls	r2, r3, #22
 8000e6a:	d4ef      	bmi.n	8000e4c <__smakebuf_r+0x18>
 8000e6c:	f023 0303 	bic.w	r3, r3, #3
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	81a3      	strh	r3, [r4, #12]
 8000e76:	e7e3      	b.n	8000e40 <__smakebuf_r+0xc>
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <__smakebuf_r+0x7c>)
 8000e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e7c:	89a3      	ldrh	r3, [r4, #12]
 8000e7e:	6020      	str	r0, [r4, #0]
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	81a3      	strh	r3, [r4, #12]
 8000e86:	9b00      	ldr	r3, [sp, #0]
 8000e88:	6163      	str	r3, [r4, #20]
 8000e8a:	9b01      	ldr	r3, [sp, #4]
 8000e8c:	6120      	str	r0, [r4, #16]
 8000e8e:	b15b      	cbz	r3, 8000ea8 <__smakebuf_r+0x74>
 8000e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e94:	4630      	mov	r0, r6
 8000e96:	f000 f93d 	bl	8001114 <_isatty_r>
 8000e9a:	b128      	cbz	r0, 8000ea8 <__smakebuf_r+0x74>
 8000e9c:	89a3      	ldrh	r3, [r4, #12]
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	89a3      	ldrh	r3, [r4, #12]
 8000eaa:	431d      	orrs	r5, r3
 8000eac:	81a5      	strh	r5, [r4, #12]
 8000eae:	e7cd      	b.n	8000e4c <__smakebuf_r+0x18>
 8000eb0:	08000ca1 	.word	0x08000ca1

08000eb4 <_free_r>:
 8000eb4:	b538      	push	{r3, r4, r5, lr}
 8000eb6:	4605      	mov	r5, r0
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	d045      	beq.n	8000f48 <_free_r+0x94>
 8000ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ec0:	1f0c      	subs	r4, r1, #4
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bfb8      	it	lt
 8000ec6:	18e4      	addlt	r4, r4, r3
 8000ec8:	f000 f946 	bl	8001158 <__malloc_lock>
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <_free_r+0x98>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	b933      	cbnz	r3, 8000ee2 <_free_r+0x2e>
 8000ed4:	6063      	str	r3, [r4, #4]
 8000ed6:	6014      	str	r4, [r2, #0]
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ede:	f000 b93c 	b.w	800115a <__malloc_unlock>
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	d90c      	bls.n	8000f00 <_free_r+0x4c>
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	1862      	adds	r2, r4, r1
 8000eea:	4293      	cmp	r3, r2
 8000eec:	bf04      	itt	eq
 8000eee:	681a      	ldreq	r2, [r3, #0]
 8000ef0:	685b      	ldreq	r3, [r3, #4]
 8000ef2:	6063      	str	r3, [r4, #4]
 8000ef4:	bf04      	itt	eq
 8000ef6:	1852      	addeq	r2, r2, r1
 8000ef8:	6022      	streq	r2, [r4, #0]
 8000efa:	6004      	str	r4, [r0, #0]
 8000efc:	e7ec      	b.n	8000ed8 <_free_r+0x24>
 8000efe:	4613      	mov	r3, r2
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	b10a      	cbz	r2, 8000f08 <_free_r+0x54>
 8000f04:	42a2      	cmp	r2, r4
 8000f06:	d9fa      	bls.n	8000efe <_free_r+0x4a>
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	1858      	adds	r0, r3, r1
 8000f0c:	42a0      	cmp	r0, r4
 8000f0e:	d10b      	bne.n	8000f28 <_free_r+0x74>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	4401      	add	r1, r0
 8000f14:	1858      	adds	r0, r3, r1
 8000f16:	4282      	cmp	r2, r0
 8000f18:	6019      	str	r1, [r3, #0]
 8000f1a:	d1dd      	bne.n	8000ed8 <_free_r+0x24>
 8000f1c:	6810      	ldr	r0, [r2, #0]
 8000f1e:	6852      	ldr	r2, [r2, #4]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	4401      	add	r1, r0
 8000f24:	6019      	str	r1, [r3, #0]
 8000f26:	e7d7      	b.n	8000ed8 <_free_r+0x24>
 8000f28:	d902      	bls.n	8000f30 <_free_r+0x7c>
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	e7d3      	b.n	8000ed8 <_free_r+0x24>
 8000f30:	6820      	ldr	r0, [r4, #0]
 8000f32:	1821      	adds	r1, r4, r0
 8000f34:	428a      	cmp	r2, r1
 8000f36:	bf04      	itt	eq
 8000f38:	6811      	ldreq	r1, [r2, #0]
 8000f3a:	6852      	ldreq	r2, [r2, #4]
 8000f3c:	6062      	str	r2, [r4, #4]
 8000f3e:	bf04      	itt	eq
 8000f40:	1809      	addeq	r1, r1, r0
 8000f42:	6021      	streq	r1, [r4, #0]
 8000f44:	605c      	str	r4, [r3, #4]
 8000f46:	e7c7      	b.n	8000ed8 <_free_r+0x24>
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000088 	.word	0x20000088

08000f50 <_malloc_r>:
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	1ccd      	adds	r5, r1, #3
 8000f54:	f025 0503 	bic.w	r5, r5, #3
 8000f58:	3508      	adds	r5, #8
 8000f5a:	2d0c      	cmp	r5, #12
 8000f5c:	bf38      	it	cc
 8000f5e:	250c      	movcc	r5, #12
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	4606      	mov	r6, r0
 8000f64:	db01      	blt.n	8000f6a <_malloc_r+0x1a>
 8000f66:	42a9      	cmp	r1, r5
 8000f68:	d903      	bls.n	8000f72 <_malloc_r+0x22>
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	6033      	str	r3, [r6, #0]
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	f000 f8f1 	bl	8001158 <__malloc_lock>
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <_malloc_r+0xac>)
 8000f78:	6814      	ldr	r4, [r2, #0]
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	b991      	cbnz	r1, 8000fa4 <_malloc_r+0x54>
 8000f7e:	4c20      	ldr	r4, [pc, #128]	; (8001000 <_malloc_r+0xb0>)
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	b91b      	cbnz	r3, 8000f8c <_malloc_r+0x3c>
 8000f84:	4630      	mov	r0, r6
 8000f86:	f000 f83d 	bl	8001004 <_sbrk_r>
 8000f8a:	6020      	str	r0, [r4, #0]
 8000f8c:	4629      	mov	r1, r5
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f000 f838 	bl	8001004 <_sbrk_r>
 8000f94:	1c43      	adds	r3, r0, #1
 8000f96:	d124      	bne.n	8000fe2 <_malloc_r+0x92>
 8000f98:	230c      	movs	r3, #12
 8000f9a:	6033      	str	r3, [r6, #0]
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f000 f8dc 	bl	800115a <__malloc_unlock>
 8000fa2:	e7e4      	b.n	8000f6e <_malloc_r+0x1e>
 8000fa4:	680b      	ldr	r3, [r1, #0]
 8000fa6:	1b5b      	subs	r3, r3, r5
 8000fa8:	d418      	bmi.n	8000fdc <_malloc_r+0x8c>
 8000faa:	2b0b      	cmp	r3, #11
 8000fac:	d90f      	bls.n	8000fce <_malloc_r+0x7e>
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	50cd      	str	r5, [r1, r3]
 8000fb2:	18cc      	adds	r4, r1, r3
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f000 f8d0 	bl	800115a <__malloc_unlock>
 8000fba:	f104 000b 	add.w	r0, r4, #11
 8000fbe:	1d23      	adds	r3, r4, #4
 8000fc0:	f020 0007 	bic.w	r0, r0, #7
 8000fc4:	1ac3      	subs	r3, r0, r3
 8000fc6:	d0d3      	beq.n	8000f70 <_malloc_r+0x20>
 8000fc8:	425a      	negs	r2, r3
 8000fca:	50e2      	str	r2, [r4, r3]
 8000fcc:	e7d0      	b.n	8000f70 <_malloc_r+0x20>
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	684b      	ldr	r3, [r1, #4]
 8000fd2:	bf16      	itet	ne
 8000fd4:	6063      	strne	r3, [r4, #4]
 8000fd6:	6013      	streq	r3, [r2, #0]
 8000fd8:	460c      	movne	r4, r1
 8000fda:	e7eb      	b.n	8000fb4 <_malloc_r+0x64>
 8000fdc:	460c      	mov	r4, r1
 8000fde:	6849      	ldr	r1, [r1, #4]
 8000fe0:	e7cc      	b.n	8000f7c <_malloc_r+0x2c>
 8000fe2:	1cc4      	adds	r4, r0, #3
 8000fe4:	f024 0403 	bic.w	r4, r4, #3
 8000fe8:	42a0      	cmp	r0, r4
 8000fea:	d005      	beq.n	8000ff8 <_malloc_r+0xa8>
 8000fec:	1a21      	subs	r1, r4, r0
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f000 f808 	bl	8001004 <_sbrk_r>
 8000ff4:	3001      	adds	r0, #1
 8000ff6:	d0cf      	beq.n	8000f98 <_malloc_r+0x48>
 8000ff8:	6025      	str	r5, [r4, #0]
 8000ffa:	e7db      	b.n	8000fb4 <_malloc_r+0x64>
 8000ffc:	20000088 	.word	0x20000088
 8001000:	2000008c 	.word	0x2000008c

08001004 <_sbrk_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4c06      	ldr	r4, [pc, #24]	; (8001020 <_sbrk_r+0x1c>)
 8001008:	2300      	movs	r3, #0
 800100a:	4605      	mov	r5, r0
 800100c:	4608      	mov	r0, r1
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	f7ff fbbc 	bl	800078c <_sbrk>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d102      	bne.n	800101e <_sbrk_r+0x1a>
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	b103      	cbz	r3, 800101e <_sbrk_r+0x1a>
 800101c:	602b      	str	r3, [r5, #0]
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	200000d0 	.word	0x200000d0

08001024 <__sread>:
 8001024:	b510      	push	{r4, lr}
 8001026:	460c      	mov	r4, r1
 8001028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800102c:	f000 f896 	bl	800115c <_read_r>
 8001030:	2800      	cmp	r0, #0
 8001032:	bfab      	itete	ge
 8001034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001036:	89a3      	ldrhlt	r3, [r4, #12]
 8001038:	181b      	addge	r3, r3, r0
 800103a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800103e:	bfac      	ite	ge
 8001040:	6563      	strge	r3, [r4, #84]	; 0x54
 8001042:	81a3      	strhlt	r3, [r4, #12]
 8001044:	bd10      	pop	{r4, pc}

08001046 <__swrite>:
 8001046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104a:	461f      	mov	r7, r3
 800104c:	898b      	ldrh	r3, [r1, #12]
 800104e:	05db      	lsls	r3, r3, #23
 8001050:	4605      	mov	r5, r0
 8001052:	460c      	mov	r4, r1
 8001054:	4616      	mov	r6, r2
 8001056:	d505      	bpl.n	8001064 <__swrite+0x1e>
 8001058:	2302      	movs	r3, #2
 800105a:	2200      	movs	r2, #0
 800105c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001060:	f000 f868 	bl	8001134 <_lseek_r>
 8001064:	89a3      	ldrh	r3, [r4, #12]
 8001066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800106a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800106e:	81a3      	strh	r3, [r4, #12]
 8001070:	4632      	mov	r2, r6
 8001072:	463b      	mov	r3, r7
 8001074:	4628      	mov	r0, r5
 8001076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800107a:	f000 b817 	b.w	80010ac <_write_r>

0800107e <__sseek>:
 800107e:	b510      	push	{r4, lr}
 8001080:	460c      	mov	r4, r1
 8001082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001086:	f000 f855 	bl	8001134 <_lseek_r>
 800108a:	1c43      	adds	r3, r0, #1
 800108c:	89a3      	ldrh	r3, [r4, #12]
 800108e:	bf15      	itete	ne
 8001090:	6560      	strne	r0, [r4, #84]	; 0x54
 8001092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800109a:	81a3      	strheq	r3, [r4, #12]
 800109c:	bf18      	it	ne
 800109e:	81a3      	strhne	r3, [r4, #12]
 80010a0:	bd10      	pop	{r4, pc}

080010a2 <__sclose>:
 80010a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010a6:	f000 b813 	b.w	80010d0 <_close_r>
	...

080010ac <_write_r>:
 80010ac:	b538      	push	{r3, r4, r5, lr}
 80010ae:	4c07      	ldr	r4, [pc, #28]	; (80010cc <_write_r+0x20>)
 80010b0:	4605      	mov	r5, r0
 80010b2:	4608      	mov	r0, r1
 80010b4:	4611      	mov	r1, r2
 80010b6:	2200      	movs	r2, #0
 80010b8:	6022      	str	r2, [r4, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	f7ff fb15 	bl	80006ea <_write>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d102      	bne.n	80010ca <_write_r+0x1e>
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	b103      	cbz	r3, 80010ca <_write_r+0x1e>
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	200000d0 	.word	0x200000d0

080010d0 <_close_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4c06      	ldr	r4, [pc, #24]	; (80010ec <_close_r+0x1c>)
 80010d4:	2300      	movs	r3, #0
 80010d6:	4605      	mov	r5, r0
 80010d8:	4608      	mov	r0, r1
 80010da:	6023      	str	r3, [r4, #0]
 80010dc:	f7ff fb21 	bl	8000722 <_close>
 80010e0:	1c43      	adds	r3, r0, #1
 80010e2:	d102      	bne.n	80010ea <_close_r+0x1a>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	b103      	cbz	r3, 80010ea <_close_r+0x1a>
 80010e8:	602b      	str	r3, [r5, #0]
 80010ea:	bd38      	pop	{r3, r4, r5, pc}
 80010ec:	200000d0 	.word	0x200000d0

080010f0 <_fstat_r>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	4c07      	ldr	r4, [pc, #28]	; (8001110 <_fstat_r+0x20>)
 80010f4:	2300      	movs	r3, #0
 80010f6:	4605      	mov	r5, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	f7ff fb1c 	bl	800073a <_fstat>
 8001102:	1c43      	adds	r3, r0, #1
 8001104:	d102      	bne.n	800110c <_fstat_r+0x1c>
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	b103      	cbz	r3, 800110c <_fstat_r+0x1c>
 800110a:	602b      	str	r3, [r5, #0]
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	200000d0 	.word	0x200000d0

08001114 <_isatty_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4c06      	ldr	r4, [pc, #24]	; (8001130 <_isatty_r+0x1c>)
 8001118:	2300      	movs	r3, #0
 800111a:	4605      	mov	r5, r0
 800111c:	4608      	mov	r0, r1
 800111e:	6023      	str	r3, [r4, #0]
 8001120:	f7ff fb1b 	bl	800075a <_isatty>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d102      	bne.n	800112e <_isatty_r+0x1a>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	b103      	cbz	r3, 800112e <_isatty_r+0x1a>
 800112c:	602b      	str	r3, [r5, #0]
 800112e:	bd38      	pop	{r3, r4, r5, pc}
 8001130:	200000d0 	.word	0x200000d0

08001134 <_lseek_r>:
 8001134:	b538      	push	{r3, r4, r5, lr}
 8001136:	4c07      	ldr	r4, [pc, #28]	; (8001154 <_lseek_r+0x20>)
 8001138:	4605      	mov	r5, r0
 800113a:	4608      	mov	r0, r1
 800113c:	4611      	mov	r1, r2
 800113e:	2200      	movs	r2, #0
 8001140:	6022      	str	r2, [r4, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	f7ff fb14 	bl	8000770 <_lseek>
 8001148:	1c43      	adds	r3, r0, #1
 800114a:	d102      	bne.n	8001152 <_lseek_r+0x1e>
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	b103      	cbz	r3, 8001152 <_lseek_r+0x1e>
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	200000d0 	.word	0x200000d0

08001158 <__malloc_lock>:
 8001158:	4770      	bx	lr

0800115a <__malloc_unlock>:
 800115a:	4770      	bx	lr

0800115c <_read_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4c07      	ldr	r4, [pc, #28]	; (800117c <_read_r+0x20>)
 8001160:	4605      	mov	r5, r0
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	2200      	movs	r2, #0
 8001168:	6022      	str	r2, [r4, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff faa0 	bl	80006b0 <_read>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_read_r+0x1e>
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	b103      	cbz	r3, 800117a <_read_r+0x1e>
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	200000d0 	.word	0x200000d0

08001180 <_init>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr

0800118c <_fini>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr
