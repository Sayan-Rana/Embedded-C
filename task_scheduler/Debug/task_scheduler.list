
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e54  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08000ffc  08000ffc  00010ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001110  08001110  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001110  08001110  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001110  08001110  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001110  08001110  00011110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000074  0800118c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800118c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002394  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000064e  00000000  00000000  00022438  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a0  00000000  00000000  00022a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  00022c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a33  00000000  00000000  00022d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000013b7  00000000  00000000  000257c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009461  00000000  00000000  00026b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ffdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b14  00000000  00000000  00030058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fe4 	.word	0x08000fe4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08000fe4 	.word	0x08000fe4

080001e8 <main>:




int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_precessor_faults();
 80001ec:	f000 f8ea 	bl	80003c4 <enable_precessor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x3c>)
 80001f2:	f000 f87b 	bl	80002ec <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80001f6:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <main+0x40>)
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0x44>)
 80001fa:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0x48>)
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <main+0x44>)
 8000200:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000202:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <main+0x4c>)
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0x44>)
 8000206:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <main+0x50>)
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <main+0x44>)
 800020c:	60da      	str	r2, [r3, #12]

	init_task_stack(); //Creating dummy stack frame.
 800020e:	f000 f873 	bl	80002f8 <init_task_stack>

	init_systic_timer(TICK_HZ);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 f831 	bl	800027c <init_systic_timer>

	switch_sp_to_psp();
 800021a:	f000 f8c5 	bl	80003a8 <switch_sp_to_psp>

	task1_handler();
 800021e:	f000 f80d 	bl	800023c <task1_handler>

	for(;;);
 8000222:	e7fe      	b.n	8000222 <main+0x3a>
 8000224:	2001f000 	.word	0x2001f000
 8000228:	0800023d 	.word	0x0800023d
 800022c:	200000a0 	.word	0x200000a0
 8000230:	0800024d 	.word	0x0800024d
 8000234:	0800025d 	.word	0x0800025d
 8000238:	0800026d 	.word	0x0800026d

0800023c <task1_handler>:
}


void task1_handler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task1\n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task1_handler+0xc>)
 8000242:	f000 fac3 	bl	80007cc <puts>
 8000246:	e7fb      	b.n	8000240 <task1_handler+0x4>
 8000248:	08000ffc 	.word	0x08000ffc

0800024c <task2_handler>:
	}
}


void task2_handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task2\n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task2_handler+0xc>)
 8000252:	f000 fabb 	bl	80007cc <puts>
 8000256:	e7fb      	b.n	8000250 <task2_handler+0x4>
 8000258:	0800100c 	.word	0x0800100c

0800025c <task3_handler>:
	}
}


void task3_handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task3\n");
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <task3_handler+0xc>)
 8000262:	f000 fab3 	bl	80007cc <puts>
 8000266:	e7fb      	b.n	8000260 <task3_handler+0x4>
 8000268:	0800101c 	.word	0x0800101c

0800026c <task4_handler>:
	}
}


void task4_handler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task4\n");
 8000270:	4801      	ldr	r0, [pc, #4]	; (8000278 <task4_handler+0xc>)
 8000272:	f000 faab 	bl	80007cc <puts>
 8000276:	e7fb      	b.n	8000270 <task4_handler+0x4>
 8000278:	0800102c 	.word	0x0800102c

0800027c <init_systic_timer>:
	}
}


void init_systic_timer(uint32_t tick_hz)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	//Address of SYSTICK reload value resister.
	uint32_t *pSYST_RVR = (uint32_t*)0xE000E014;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <init_systic_timer+0x64>)
 8000286:	617b      	str	r3, [r7, #20]
	//SYSTICk control and status register.
	uint32_t *pSYST_CSR = (uint32_t*)0xE000E010;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <init_systic_timer+0x68>)
 800028a:	613b      	str	r3, [r7, #16]

	//Reload value calculation.
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz);
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <init_systic_timer+0x6c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	fbb2 f3f3 	udiv	r3, r2, r3
 8000294:	60fb      	str	r3, [r7, #12]

	//Clear the value of SYST_RVR(reload value resister).
	*pSYST_RVR &= ~(0x00FFFFFF);
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	601a      	str	r2, [r3, #0]
	//Load the value into SYST_RVR(reload value resister).
	*pSYST_RVR |= (count_value -1); //-1 is required due to SYSTICK exception will triggered after copying the value from RVR to CVR.
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	431a      	orrs	r2, r3
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	601a      	str	r2, [r3, #0]

	//Do some settings
	*pSYST_CSR |= (0x1 << 1);  //Enable SYSTICK exception request.
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 0202 	orr.w	r2, r3, #2
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= (0x1 << 2);  //Indicate the clock source, processor clock source.
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f043 0204 	orr.w	r2, r3, #4
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	601a      	str	r2, [r3, #0]

	//Enable the SYSTICK
	*pSYST_CSR |= (0x1 << 0);  // Enable the SYSTICK counter.
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 0201 	orr.w	r2, r3, #1
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	601a      	str	r2, [r3, #0]

}
 80002d4:	bf00      	nop
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000e014 	.word	0xe000e014
 80002e4:	e000e010 	.word	0xe000e010
 80002e8:	00f42400 	.word	0x00f42400

080002ec <init_scheduler_stack>:


__attribute ((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80002ec:	4603      	mov	r3, r0
	//Using general purpose register to move the value in MSP.
	//__asm volatile ("MSR MSP,R0");

	//Using GCC inline assembly syntax using C variable.
	__asm volatile ("MSR MSP,%0"::"r"(sched_top_of_stack): );
 80002ee:	f383 8808 	msr	MSP, r3

	//Loading the value of LR into PC because this is a naked function and we must go back to main after executing this function.
	//Naked function does not have any epilogue and prologue sequence.
	__asm volatile ("BX LR");
 80002f2:	4770      	bx	lr
}
 80002f4:	bf00      	nop
	...

080002f8 <init_task_stack>:


void init_task_stack(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASK; i++)
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	e032      	b.n	800036a <init_task_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[i];
 8000304:	4a1d      	ldr	r2, [pc, #116]	; (800037c <init_task_stack+0x84>)
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030c:	60fb      	str	r3, [r7, #12]

		pPSP--;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3b04      	subs	r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_xPSR; //value should be 0x01000000.
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800031a:	601a      	str	r2, [r3, #0]

		pPSP--;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	3b04      	subs	r3, #4
 8000320:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];  //PC value.
 8000322:	4a17      	ldr	r2, [pc, #92]	; (8000380 <init_task_stack+0x88>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]

		pPSP--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b04      	subs	r3, #4
 8000332:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;  //LR value.
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f06f 0202 	mvn.w	r2, #2
 800033a:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	e008      	b.n	8000354 <init_task_stack+0x5c>
		{
			pPSP--;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	3b04      	subs	r3, #4
 8000346:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3301      	adds	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b0c      	cmp	r3, #12
 8000358:	ddf3      	ble.n	8000342 <init_task_stack+0x4a>
		}
		//Saving the address of the stack pointer(in this case PSP).
		psp_of_tasks[i] = (uint32_t)pPSP;
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <init_task_stack+0x84>)
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASK; i++)
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	3301      	adds	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	2b03      	cmp	r3, #3
 800036e:	ddc9      	ble.n	8000304 <init_task_stack+0xc>
	}
}
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	20000000 	.word	0x20000000
 8000380:	200000a0 	.word	0x200000a0

08000384 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <get_psp_value+0x1c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <get_psp_value+0x20>)
 8000390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000394:	4618      	mov	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	20000090 	.word	0x20000090
 80003a4:	20000000 	.word	0x20000000

080003a8 <switch_sp_to_psp>:
__attribute ((naked)) void switch_sp_to_psp(void)
{
	//1. Initialize the PSP with Task1 stack start address.

	//Get the value of the PSP of the current task.
	__asm volatile ("PUSH {LR}"); //Preserve LR into stack, which connects back to main()
 80003a8:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 80003aa:	f7ff ffeb 	bl	8000384 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //Initialize PSP.
 80003ae:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // Pops back LR value.
 80003b2:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Change SP to PSP using Control register.
	__asm volatile ("MOV R0,#0x02");
 80003b6:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80003ba:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80003be:	4770      	bx	lr
}
 80003c0:	bf00      	nop
	...

080003c4 <enable_precessor_faults>:


void enable_precessor_faults(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
    //1. Enable all configurable fault exceptions like usage fault, mem manage fault and bus fault.
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <enable_precessor_faults+0x3c>)
 80003cc:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1<<16); //Activate mem manage fault.
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17); //Activate bus fault.
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18); //Activate usage fault.
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed24 	.word	0xe000ed24

08000404 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <save_psp_value+0x24>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	4a06      	ldr	r2, [pc, #24]	; (800042c <save_psp_value+0x28>)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	20000090 	.word	0x20000090
 800042c:	20000000 	.word	0x20000000

08000430 <update_next_task>:


void update_next_task(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	current_task++;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <update_next_task+0x28>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	3301      	adds	r3, #1
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <update_next_task+0x28>)
 800043e:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASK;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <update_next_task+0x28>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	f003 0303 	and.w	r3, r3, #3
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b03      	ldr	r3, [pc, #12]	; (8000458 <update_next_task+0x28>)
 800044c:	701a      	strb	r2, [r3, #0]
}
 800044e:	bf00      	nop
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	20000090 	.word	0x20000090

0800045c <SysTick_Handler>:
__attribute ((naked)) void SysTick_Handler(void)
{
	/*Save the context of the current task*/

	//1. Get current running task's PSP value.
	__asm volatile ("MRS R0,PSP");
 800045c:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2(R4 to R11).
	__asm volatile ("STMDB R0!,{R4-R11}");
 8000460:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//First we have to save the LR value of the calling function before call any function.
	__asm volatile ("PUSH {LR}");
 8000464:	b500      	push	{lr}

	//3. Save the current current value of the PSP.
	__asm volatile ("BL save_psp_value");
 8000466:	f7ff ffcd 	bl	8000404 <save_psp_value>

	/*Retrieve the context of the next task*/

	//1. Decide next task to run.
	__asm volatile ("BL update_next_task");
 800046a:	f7ff ffe1 	bl	8000430 <update_next_task>

	//2. Get its past PSP value.
	__asm volatile ("BL get_psp_value");
 800046e:	f7ff ff89 	bl	8000384 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11).
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. Update PSP and exit.
	__asm volatile ("MSR PSP,R0");
 8000476:	f380 8809 	msr	PSP, r0

	//After function call we have to POP back the LR value.
	__asm volatile ("POP {LR}");
 800047a:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("BX LR");
 800047e:	4770      	bx	lr
}
 8000480:	bf00      	nop
	...

08000484 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	printf("Fault : HardFault_Handler\n");
 8000488:	4801      	ldr	r0, [pc, #4]	; (8000490 <HardFault_Handler+0xc>)
 800048a:	f000 f99f 	bl	80007cc <puts>
	while(1);
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0xa>
 8000490:	0800103c 	.word	0x0800103c

08000494 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	printf("Fault : MemManage_Handler\n");
 8000498:	4801      	ldr	r0, [pc, #4]	; (80004a0 <MemManage_Handler+0xc>)
 800049a:	f000 f997 	bl	80007cc <puts>
	while(1);
 800049e:	e7fe      	b.n	800049e <MemManage_Handler+0xa>
 80004a0:	08001058 	.word	0x08001058

080004a4 <BusFault_Handler>:
}


void BusFault_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	printf("Fault : BusFault_Handler\n");
 80004a8:	4801      	ldr	r0, [pc, #4]	; (80004b0 <BusFault_Handler+0xc>)
 80004aa:	f000 f98f 	bl	80007cc <puts>
	while(1);
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0xa>
 80004b0:	08001074 	.word	0x08001074

080004b4 <UsageFault_Handler>:
}


void UsageFault_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	printf("Fault : UsageFault_Handler\n");
 80004b8:	4801      	ldr	r0, [pc, #4]	; (80004c0 <UsageFault_Handler+0xc>)
 80004ba:	f000 f987 	bl	80007cc <puts>
	while(1);
 80004be:	e7fe      	b.n	80004be <UsageFault_Handler+0xa>
 80004c0:	08001090 	.word	0x08001090

080004c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <ITM_SendChar+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <ITM_SendChar+0x48>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <ITM_SendChar+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <ITM_SendChar+0x4c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e6:	bf00      	nop
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
	}

return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffab 	bl	80004c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
	}
	return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
	return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ae:	605a      	str	r2, [r3, #4]
	return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 f846 	bl	80006b0 <__errno>
 8000624:	4602      	mov	r2, r0
 8000626:	230c      	movs	r3, #12
 8000628:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20020000 	.word	0x20020000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000094 	.word	0x20000094
 8000658:	200000b8 	.word	0x200000b8

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	; (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 f817 	bl	80006bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fdab 	bl	80001e8 <main>

08000692 <LoopForever>:

LoopForever:
    b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006a0:	08001118 	.word	0x08001118
  ldr r2, =_sbss
 80006a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006a8:	200000b4 	.word	0x200000b4

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <__errno>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <__errno+0x8>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000010 	.word	0x20000010

080006bc <__libc_init_array>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	4e0d      	ldr	r6, [pc, #52]	; (80006f4 <__libc_init_array+0x38>)
 80006c0:	4c0d      	ldr	r4, [pc, #52]	; (80006f8 <__libc_init_array+0x3c>)
 80006c2:	1ba4      	subs	r4, r4, r6
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	2500      	movs	r5, #0
 80006c8:	42a5      	cmp	r5, r4
 80006ca:	d109      	bne.n	80006e0 <__libc_init_array+0x24>
 80006cc:	4e0b      	ldr	r6, [pc, #44]	; (80006fc <__libc_init_array+0x40>)
 80006ce:	4c0c      	ldr	r4, [pc, #48]	; (8000700 <__libc_init_array+0x44>)
 80006d0:	f000 fc88 	bl	8000fe4 <_init>
 80006d4:	1ba4      	subs	r4, r4, r6
 80006d6:	10a4      	asrs	r4, r4, #2
 80006d8:	2500      	movs	r5, #0
 80006da:	42a5      	cmp	r5, r4
 80006dc:	d105      	bne.n	80006ea <__libc_init_array+0x2e>
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006e4:	4798      	blx	r3
 80006e6:	3501      	adds	r5, #1
 80006e8:	e7ee      	b.n	80006c8 <__libc_init_array+0xc>
 80006ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006ee:	4798      	blx	r3
 80006f0:	3501      	adds	r5, #1
 80006f2:	e7f2      	b.n	80006da <__libc_init_array+0x1e>
 80006f4:	08001110 	.word	0x08001110
 80006f8:	08001110 	.word	0x08001110
 80006fc:	08001110 	.word	0x08001110
 8000700:	08001114 	.word	0x08001114

08000704 <memset>:
 8000704:	4402      	add	r2, r0
 8000706:	4603      	mov	r3, r0
 8000708:	4293      	cmp	r3, r2
 800070a:	d100      	bne.n	800070e <memset+0xa>
 800070c:	4770      	bx	lr
 800070e:	f803 1b01 	strb.w	r1, [r3], #1
 8000712:	e7f9      	b.n	8000708 <memset+0x4>

08000714 <_puts_r>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	460e      	mov	r6, r1
 8000718:	4605      	mov	r5, r0
 800071a:	b118      	cbz	r0, 8000724 <_puts_r+0x10>
 800071c:	6983      	ldr	r3, [r0, #24]
 800071e:	b90b      	cbnz	r3, 8000724 <_puts_r+0x10>
 8000720:	f000 fa0c 	bl	8000b3c <__sinit>
 8000724:	69ab      	ldr	r3, [r5, #24]
 8000726:	68ac      	ldr	r4, [r5, #8]
 8000728:	b913      	cbnz	r3, 8000730 <_puts_r+0x1c>
 800072a:	4628      	mov	r0, r5
 800072c:	f000 fa06 	bl	8000b3c <__sinit>
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <_puts_r+0xac>)
 8000732:	429c      	cmp	r4, r3
 8000734:	d117      	bne.n	8000766 <_puts_r+0x52>
 8000736:	686c      	ldr	r4, [r5, #4]
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	071b      	lsls	r3, r3, #28
 800073c:	d51d      	bpl.n	800077a <_puts_r+0x66>
 800073e:	6923      	ldr	r3, [r4, #16]
 8000740:	b1db      	cbz	r3, 800077a <_puts_r+0x66>
 8000742:	3e01      	subs	r6, #1
 8000744:	68a3      	ldr	r3, [r4, #8]
 8000746:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800074a:	3b01      	subs	r3, #1
 800074c:	60a3      	str	r3, [r4, #8]
 800074e:	b9e9      	cbnz	r1, 800078c <_puts_r+0x78>
 8000750:	2b00      	cmp	r3, #0
 8000752:	da2e      	bge.n	80007b2 <_puts_r+0x9e>
 8000754:	4622      	mov	r2, r4
 8000756:	210a      	movs	r1, #10
 8000758:	4628      	mov	r0, r5
 800075a:	f000 f83f 	bl	80007dc <__swbuf_r>
 800075e:	3001      	adds	r0, #1
 8000760:	d011      	beq.n	8000786 <_puts_r+0x72>
 8000762:	200a      	movs	r0, #10
 8000764:	e011      	b.n	800078a <_puts_r+0x76>
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <_puts_r+0xb0>)
 8000768:	429c      	cmp	r4, r3
 800076a:	d101      	bne.n	8000770 <_puts_r+0x5c>
 800076c:	68ac      	ldr	r4, [r5, #8]
 800076e:	e7e3      	b.n	8000738 <_puts_r+0x24>
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <_puts_r+0xb4>)
 8000772:	429c      	cmp	r4, r3
 8000774:	bf08      	it	eq
 8000776:	68ec      	ldreq	r4, [r5, #12]
 8000778:	e7de      	b.n	8000738 <_puts_r+0x24>
 800077a:	4621      	mov	r1, r4
 800077c:	4628      	mov	r0, r5
 800077e:	f000 f87f 	bl	8000880 <__swsetup_r>
 8000782:	2800      	cmp	r0, #0
 8000784:	d0dd      	beq.n	8000742 <_puts_r+0x2e>
 8000786:	f04f 30ff 	mov.w	r0, #4294967295
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	2b00      	cmp	r3, #0
 800078e:	da04      	bge.n	800079a <_puts_r+0x86>
 8000790:	69a2      	ldr	r2, [r4, #24]
 8000792:	429a      	cmp	r2, r3
 8000794:	dc06      	bgt.n	80007a4 <_puts_r+0x90>
 8000796:	290a      	cmp	r1, #10
 8000798:	d004      	beq.n	80007a4 <_puts_r+0x90>
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	6022      	str	r2, [r4, #0]
 80007a0:	7019      	strb	r1, [r3, #0]
 80007a2:	e7cf      	b.n	8000744 <_puts_r+0x30>
 80007a4:	4622      	mov	r2, r4
 80007a6:	4628      	mov	r0, r5
 80007a8:	f000 f818 	bl	80007dc <__swbuf_r>
 80007ac:	3001      	adds	r0, #1
 80007ae:	d1c9      	bne.n	8000744 <_puts_r+0x30>
 80007b0:	e7e9      	b.n	8000786 <_puts_r+0x72>
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	200a      	movs	r0, #10
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	6022      	str	r2, [r4, #0]
 80007ba:	7018      	strb	r0, [r3, #0]
 80007bc:	e7e5      	b.n	800078a <_puts_r+0x76>
 80007be:	bf00      	nop
 80007c0:	080010d0 	.word	0x080010d0
 80007c4:	080010f0 	.word	0x080010f0
 80007c8:	080010b0 	.word	0x080010b0

080007cc <puts>:
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <puts+0xc>)
 80007ce:	4601      	mov	r1, r0
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	f7ff bf9f 	b.w	8000714 <_puts_r>
 80007d6:	bf00      	nop
 80007d8:	20000010 	.word	0x20000010

080007dc <__swbuf_r>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	460e      	mov	r6, r1
 80007e0:	4614      	mov	r4, r2
 80007e2:	4605      	mov	r5, r0
 80007e4:	b118      	cbz	r0, 80007ee <__swbuf_r+0x12>
 80007e6:	6983      	ldr	r3, [r0, #24]
 80007e8:	b90b      	cbnz	r3, 80007ee <__swbuf_r+0x12>
 80007ea:	f000 f9a7 	bl	8000b3c <__sinit>
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <__swbuf_r+0x98>)
 80007f0:	429c      	cmp	r4, r3
 80007f2:	d12a      	bne.n	800084a <__swbuf_r+0x6e>
 80007f4:	686c      	ldr	r4, [r5, #4]
 80007f6:	69a3      	ldr	r3, [r4, #24]
 80007f8:	60a3      	str	r3, [r4, #8]
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	071a      	lsls	r2, r3, #28
 80007fe:	d52e      	bpl.n	800085e <__swbuf_r+0x82>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	b363      	cbz	r3, 800085e <__swbuf_r+0x82>
 8000804:	6923      	ldr	r3, [r4, #16]
 8000806:	6820      	ldr	r0, [r4, #0]
 8000808:	1ac0      	subs	r0, r0, r3
 800080a:	6963      	ldr	r3, [r4, #20]
 800080c:	b2f6      	uxtb	r6, r6
 800080e:	4283      	cmp	r3, r0
 8000810:	4637      	mov	r7, r6
 8000812:	dc04      	bgt.n	800081e <__swbuf_r+0x42>
 8000814:	4621      	mov	r1, r4
 8000816:	4628      	mov	r0, r5
 8000818:	f000 f926 	bl	8000a68 <_fflush_r>
 800081c:	bb28      	cbnz	r0, 800086a <__swbuf_r+0x8e>
 800081e:	68a3      	ldr	r3, [r4, #8]
 8000820:	3b01      	subs	r3, #1
 8000822:	60a3      	str	r3, [r4, #8]
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	1c5a      	adds	r2, r3, #1
 8000828:	6022      	str	r2, [r4, #0]
 800082a:	701e      	strb	r6, [r3, #0]
 800082c:	6963      	ldr	r3, [r4, #20]
 800082e:	3001      	adds	r0, #1
 8000830:	4283      	cmp	r3, r0
 8000832:	d004      	beq.n	800083e <__swbuf_r+0x62>
 8000834:	89a3      	ldrh	r3, [r4, #12]
 8000836:	07db      	lsls	r3, r3, #31
 8000838:	d519      	bpl.n	800086e <__swbuf_r+0x92>
 800083a:	2e0a      	cmp	r6, #10
 800083c:	d117      	bne.n	800086e <__swbuf_r+0x92>
 800083e:	4621      	mov	r1, r4
 8000840:	4628      	mov	r0, r5
 8000842:	f000 f911 	bl	8000a68 <_fflush_r>
 8000846:	b190      	cbz	r0, 800086e <__swbuf_r+0x92>
 8000848:	e00f      	b.n	800086a <__swbuf_r+0x8e>
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <__swbuf_r+0x9c>)
 800084c:	429c      	cmp	r4, r3
 800084e:	d101      	bne.n	8000854 <__swbuf_r+0x78>
 8000850:	68ac      	ldr	r4, [r5, #8]
 8000852:	e7d0      	b.n	80007f6 <__swbuf_r+0x1a>
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <__swbuf_r+0xa0>)
 8000856:	429c      	cmp	r4, r3
 8000858:	bf08      	it	eq
 800085a:	68ec      	ldreq	r4, [r5, #12]
 800085c:	e7cb      	b.n	80007f6 <__swbuf_r+0x1a>
 800085e:	4621      	mov	r1, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 f80d 	bl	8000880 <__swsetup_r>
 8000866:	2800      	cmp	r0, #0
 8000868:	d0cc      	beq.n	8000804 <__swbuf_r+0x28>
 800086a:	f04f 37ff 	mov.w	r7, #4294967295
 800086e:	4638      	mov	r0, r7
 8000870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000872:	bf00      	nop
 8000874:	080010d0 	.word	0x080010d0
 8000878:	080010f0 	.word	0x080010f0
 800087c:	080010b0 	.word	0x080010b0

08000880 <__swsetup_r>:
 8000880:	4b32      	ldr	r3, [pc, #200]	; (800094c <__swsetup_r+0xcc>)
 8000882:	b570      	push	{r4, r5, r6, lr}
 8000884:	681d      	ldr	r5, [r3, #0]
 8000886:	4606      	mov	r6, r0
 8000888:	460c      	mov	r4, r1
 800088a:	b125      	cbz	r5, 8000896 <__swsetup_r+0x16>
 800088c:	69ab      	ldr	r3, [r5, #24]
 800088e:	b913      	cbnz	r3, 8000896 <__swsetup_r+0x16>
 8000890:	4628      	mov	r0, r5
 8000892:	f000 f953 	bl	8000b3c <__sinit>
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <__swsetup_r+0xd0>)
 8000898:	429c      	cmp	r4, r3
 800089a:	d10f      	bne.n	80008bc <__swsetup_r+0x3c>
 800089c:	686c      	ldr	r4, [r5, #4]
 800089e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	0715      	lsls	r5, r2, #28
 80008a6:	d42c      	bmi.n	8000902 <__swsetup_r+0x82>
 80008a8:	06d0      	lsls	r0, r2, #27
 80008aa:	d411      	bmi.n	80008d0 <__swsetup_r+0x50>
 80008ac:	2209      	movs	r2, #9
 80008ae:	6032      	str	r2, [r6, #0]
 80008b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b4:	81a3      	strh	r3, [r4, #12]
 80008b6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ba:	e03e      	b.n	800093a <__swsetup_r+0xba>
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <__swsetup_r+0xd4>)
 80008be:	429c      	cmp	r4, r3
 80008c0:	d101      	bne.n	80008c6 <__swsetup_r+0x46>
 80008c2:	68ac      	ldr	r4, [r5, #8]
 80008c4:	e7eb      	b.n	800089e <__swsetup_r+0x1e>
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <__swsetup_r+0xd8>)
 80008c8:	429c      	cmp	r4, r3
 80008ca:	bf08      	it	eq
 80008cc:	68ec      	ldreq	r4, [r5, #12]
 80008ce:	e7e6      	b.n	800089e <__swsetup_r+0x1e>
 80008d0:	0751      	lsls	r1, r2, #29
 80008d2:	d512      	bpl.n	80008fa <__swsetup_r+0x7a>
 80008d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008d6:	b141      	cbz	r1, 80008ea <__swsetup_r+0x6a>
 80008d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008dc:	4299      	cmp	r1, r3
 80008de:	d002      	beq.n	80008e6 <__swsetup_r+0x66>
 80008e0:	4630      	mov	r0, r6
 80008e2:	f000 fa19 	bl	8000d18 <_free_r>
 80008e6:	2300      	movs	r3, #0
 80008e8:	6363      	str	r3, [r4, #52]	; 0x34
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008f0:	81a3      	strh	r3, [r4, #12]
 80008f2:	2300      	movs	r3, #0
 80008f4:	6063      	str	r3, [r4, #4]
 80008f6:	6923      	ldr	r3, [r4, #16]
 80008f8:	6023      	str	r3, [r4, #0]
 80008fa:	89a3      	ldrh	r3, [r4, #12]
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	81a3      	strh	r3, [r4, #12]
 8000902:	6923      	ldr	r3, [r4, #16]
 8000904:	b94b      	cbnz	r3, 800091a <__swsetup_r+0x9a>
 8000906:	89a3      	ldrh	r3, [r4, #12]
 8000908:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800090c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000910:	d003      	beq.n	800091a <__swsetup_r+0x9a>
 8000912:	4621      	mov	r1, r4
 8000914:	4630      	mov	r0, r6
 8000916:	f000 f9bf 	bl	8000c98 <__smakebuf_r>
 800091a:	89a2      	ldrh	r2, [r4, #12]
 800091c:	f012 0301 	ands.w	r3, r2, #1
 8000920:	d00c      	beq.n	800093c <__swsetup_r+0xbc>
 8000922:	2300      	movs	r3, #0
 8000924:	60a3      	str	r3, [r4, #8]
 8000926:	6963      	ldr	r3, [r4, #20]
 8000928:	425b      	negs	r3, r3
 800092a:	61a3      	str	r3, [r4, #24]
 800092c:	6923      	ldr	r3, [r4, #16]
 800092e:	b953      	cbnz	r3, 8000946 <__swsetup_r+0xc6>
 8000930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000934:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000938:	d1ba      	bne.n	80008b0 <__swsetup_r+0x30>
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	0792      	lsls	r2, r2, #30
 800093e:	bf58      	it	pl
 8000940:	6963      	ldrpl	r3, [r4, #20]
 8000942:	60a3      	str	r3, [r4, #8]
 8000944:	e7f2      	b.n	800092c <__swsetup_r+0xac>
 8000946:	2000      	movs	r0, #0
 8000948:	e7f7      	b.n	800093a <__swsetup_r+0xba>
 800094a:	bf00      	nop
 800094c:	20000010 	.word	0x20000010
 8000950:	080010d0 	.word	0x080010d0
 8000954:	080010f0 	.word	0x080010f0
 8000958:	080010b0 	.word	0x080010b0

0800095c <__sflush_r>:
 800095c:	898a      	ldrh	r2, [r1, #12]
 800095e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000962:	4605      	mov	r5, r0
 8000964:	0710      	lsls	r0, r2, #28
 8000966:	460c      	mov	r4, r1
 8000968:	d458      	bmi.n	8000a1c <__sflush_r+0xc0>
 800096a:	684b      	ldr	r3, [r1, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	dc05      	bgt.n	800097c <__sflush_r+0x20>
 8000970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000972:	2b00      	cmp	r3, #0
 8000974:	dc02      	bgt.n	800097c <__sflush_r+0x20>
 8000976:	2000      	movs	r0, #0
 8000978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800097c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800097e:	2e00      	cmp	r6, #0
 8000980:	d0f9      	beq.n	8000976 <__sflush_r+0x1a>
 8000982:	2300      	movs	r3, #0
 8000984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000988:	682f      	ldr	r7, [r5, #0]
 800098a:	6a21      	ldr	r1, [r4, #32]
 800098c:	602b      	str	r3, [r5, #0]
 800098e:	d032      	beq.n	80009f6 <__sflush_r+0x9a>
 8000990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000992:	89a3      	ldrh	r3, [r4, #12]
 8000994:	075a      	lsls	r2, r3, #29
 8000996:	d505      	bpl.n	80009a4 <__sflush_r+0x48>
 8000998:	6863      	ldr	r3, [r4, #4]
 800099a:	1ac0      	subs	r0, r0, r3
 800099c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800099e:	b10b      	cbz	r3, 80009a4 <__sflush_r+0x48>
 80009a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009a2:	1ac0      	subs	r0, r0, r3
 80009a4:	2300      	movs	r3, #0
 80009a6:	4602      	mov	r2, r0
 80009a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009aa:	6a21      	ldr	r1, [r4, #32]
 80009ac:	4628      	mov	r0, r5
 80009ae:	47b0      	blx	r6
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	d106      	bne.n	80009c4 <__sflush_r+0x68>
 80009b6:	6829      	ldr	r1, [r5, #0]
 80009b8:	291d      	cmp	r1, #29
 80009ba:	d848      	bhi.n	8000a4e <__sflush_r+0xf2>
 80009bc:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <__sflush_r+0x108>)
 80009be:	40ca      	lsrs	r2, r1
 80009c0:	07d6      	lsls	r6, r2, #31
 80009c2:	d544      	bpl.n	8000a4e <__sflush_r+0xf2>
 80009c4:	2200      	movs	r2, #0
 80009c6:	6062      	str	r2, [r4, #4]
 80009c8:	04d9      	lsls	r1, r3, #19
 80009ca:	6922      	ldr	r2, [r4, #16]
 80009cc:	6022      	str	r2, [r4, #0]
 80009ce:	d504      	bpl.n	80009da <__sflush_r+0x7e>
 80009d0:	1c42      	adds	r2, r0, #1
 80009d2:	d101      	bne.n	80009d8 <__sflush_r+0x7c>
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	b903      	cbnz	r3, 80009da <__sflush_r+0x7e>
 80009d8:	6560      	str	r0, [r4, #84]	; 0x54
 80009da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009dc:	602f      	str	r7, [r5, #0]
 80009de:	2900      	cmp	r1, #0
 80009e0:	d0c9      	beq.n	8000976 <__sflush_r+0x1a>
 80009e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e6:	4299      	cmp	r1, r3
 80009e8:	d002      	beq.n	80009f0 <__sflush_r+0x94>
 80009ea:	4628      	mov	r0, r5
 80009ec:	f000 f994 	bl	8000d18 <_free_r>
 80009f0:	2000      	movs	r0, #0
 80009f2:	6360      	str	r0, [r4, #52]	; 0x34
 80009f4:	e7c0      	b.n	8000978 <__sflush_r+0x1c>
 80009f6:	2301      	movs	r3, #1
 80009f8:	4628      	mov	r0, r5
 80009fa:	47b0      	blx	r6
 80009fc:	1c41      	adds	r1, r0, #1
 80009fe:	d1c8      	bne.n	8000992 <__sflush_r+0x36>
 8000a00:	682b      	ldr	r3, [r5, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0c5      	beq.n	8000992 <__sflush_r+0x36>
 8000a06:	2b1d      	cmp	r3, #29
 8000a08:	d001      	beq.n	8000a0e <__sflush_r+0xb2>
 8000a0a:	2b16      	cmp	r3, #22
 8000a0c:	d101      	bne.n	8000a12 <__sflush_r+0xb6>
 8000a0e:	602f      	str	r7, [r5, #0]
 8000a10:	e7b1      	b.n	8000976 <__sflush_r+0x1a>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a18:	81a3      	strh	r3, [r4, #12]
 8000a1a:	e7ad      	b.n	8000978 <__sflush_r+0x1c>
 8000a1c:	690f      	ldr	r7, [r1, #16]
 8000a1e:	2f00      	cmp	r7, #0
 8000a20:	d0a9      	beq.n	8000976 <__sflush_r+0x1a>
 8000a22:	0793      	lsls	r3, r2, #30
 8000a24:	680e      	ldr	r6, [r1, #0]
 8000a26:	bf08      	it	eq
 8000a28:	694b      	ldreq	r3, [r1, #20]
 8000a2a:	600f      	str	r7, [r1, #0]
 8000a2c:	bf18      	it	ne
 8000a2e:	2300      	movne	r3, #0
 8000a30:	eba6 0807 	sub.w	r8, r6, r7
 8000a34:	608b      	str	r3, [r1, #8]
 8000a36:	f1b8 0f00 	cmp.w	r8, #0
 8000a3a:	dd9c      	ble.n	8000976 <__sflush_r+0x1a>
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	463a      	mov	r2, r7
 8000a40:	6a21      	ldr	r1, [r4, #32]
 8000a42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a44:	4628      	mov	r0, r5
 8000a46:	47b0      	blx	r6
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	dc06      	bgt.n	8000a5a <__sflush_r+0xfe>
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a52:	81a3      	strh	r3, [r4, #12]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	e78e      	b.n	8000978 <__sflush_r+0x1c>
 8000a5a:	4407      	add	r7, r0
 8000a5c:	eba8 0800 	sub.w	r8, r8, r0
 8000a60:	e7e9      	b.n	8000a36 <__sflush_r+0xda>
 8000a62:	bf00      	nop
 8000a64:	20400001 	.word	0x20400001

08000a68 <_fflush_r>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	690b      	ldr	r3, [r1, #16]
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	460c      	mov	r4, r1
 8000a70:	b1db      	cbz	r3, 8000aaa <_fflush_r+0x42>
 8000a72:	b118      	cbz	r0, 8000a7c <_fflush_r+0x14>
 8000a74:	6983      	ldr	r3, [r0, #24]
 8000a76:	b90b      	cbnz	r3, 8000a7c <_fflush_r+0x14>
 8000a78:	f000 f860 	bl	8000b3c <__sinit>
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_fflush_r+0x48>)
 8000a7e:	429c      	cmp	r4, r3
 8000a80:	d109      	bne.n	8000a96 <_fflush_r+0x2e>
 8000a82:	686c      	ldr	r4, [r5, #4]
 8000a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a88:	b17b      	cbz	r3, 8000aaa <_fflush_r+0x42>
 8000a8a:	4621      	mov	r1, r4
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a92:	f7ff bf63 	b.w	800095c <__sflush_r>
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_fflush_r+0x4c>)
 8000a98:	429c      	cmp	r4, r3
 8000a9a:	d101      	bne.n	8000aa0 <_fflush_r+0x38>
 8000a9c:	68ac      	ldr	r4, [r5, #8]
 8000a9e:	e7f1      	b.n	8000a84 <_fflush_r+0x1c>
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <_fflush_r+0x50>)
 8000aa2:	429c      	cmp	r4, r3
 8000aa4:	bf08      	it	eq
 8000aa6:	68ec      	ldreq	r4, [r5, #12]
 8000aa8:	e7ec      	b.n	8000a84 <_fflush_r+0x1c>
 8000aaa:	2000      	movs	r0, #0
 8000aac:	bd38      	pop	{r3, r4, r5, pc}
 8000aae:	bf00      	nop
 8000ab0:	080010d0 	.word	0x080010d0
 8000ab4:	080010f0 	.word	0x080010f0
 8000ab8:	080010b0 	.word	0x080010b0

08000abc <std>:
 8000abc:	2300      	movs	r3, #0
 8000abe:	b510      	push	{r4, lr}
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ac6:	6083      	str	r3, [r0, #8]
 8000ac8:	8181      	strh	r1, [r0, #12]
 8000aca:	6643      	str	r3, [r0, #100]	; 0x64
 8000acc:	81c2      	strh	r2, [r0, #14]
 8000ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ad2:	6183      	str	r3, [r0, #24]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	305c      	adds	r0, #92	; 0x5c
 8000ada:	f7ff fe13 	bl	8000704 <memset>
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <std+0x38>)
 8000ae0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <std+0x3c>)
 8000ae4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <std+0x40>)
 8000ae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <std+0x44>)
 8000aec:	6224      	str	r4, [r4, #32]
 8000aee:	6323      	str	r3, [r4, #48]	; 0x30
 8000af0:	bd10      	pop	{r4, pc}
 8000af2:	bf00      	nop
 8000af4:	08000e89 	.word	0x08000e89
 8000af8:	08000eab 	.word	0x08000eab
 8000afc:	08000ee3 	.word	0x08000ee3
 8000b00:	08000f07 	.word	0x08000f07

08000b04 <_cleanup_r>:
 8000b04:	4901      	ldr	r1, [pc, #4]	; (8000b0c <_cleanup_r+0x8>)
 8000b06:	f000 b885 	b.w	8000c14 <_fwalk_reent>
 8000b0a:	bf00      	nop
 8000b0c:	08000a69 	.word	0x08000a69

08000b10 <__sfmoreglue>:
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	1e4a      	subs	r2, r1, #1
 8000b14:	2568      	movs	r5, #104	; 0x68
 8000b16:	4355      	muls	r5, r2
 8000b18:	460e      	mov	r6, r1
 8000b1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b1e:	f000 f949 	bl	8000db4 <_malloc_r>
 8000b22:	4604      	mov	r4, r0
 8000b24:	b140      	cbz	r0, 8000b38 <__sfmoreglue+0x28>
 8000b26:	2100      	movs	r1, #0
 8000b28:	e9c0 1600 	strd	r1, r6, [r0]
 8000b2c:	300c      	adds	r0, #12
 8000b2e:	60a0      	str	r0, [r4, #8]
 8000b30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b34:	f7ff fde6 	bl	8000704 <memset>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}

08000b3c <__sinit>:
 8000b3c:	6983      	ldr	r3, [r0, #24]
 8000b3e:	b510      	push	{r4, lr}
 8000b40:	4604      	mov	r4, r0
 8000b42:	bb33      	cbnz	r3, 8000b92 <__sinit+0x56>
 8000b44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b48:	6503      	str	r3, [r0, #80]	; 0x50
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <__sinit+0x58>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <__sinit+0x5c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6282      	str	r2, [r0, #40]	; 0x28
 8000b52:	4298      	cmp	r0, r3
 8000b54:	bf04      	itt	eq
 8000b56:	2301      	moveq	r3, #1
 8000b58:	6183      	streq	r3, [r0, #24]
 8000b5a:	f000 f81f 	bl	8000b9c <__sfp>
 8000b5e:	6060      	str	r0, [r4, #4]
 8000b60:	4620      	mov	r0, r4
 8000b62:	f000 f81b 	bl	8000b9c <__sfp>
 8000b66:	60a0      	str	r0, [r4, #8]
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f000 f817 	bl	8000b9c <__sfp>
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60e0      	str	r0, [r4, #12]
 8000b72:	2104      	movs	r1, #4
 8000b74:	6860      	ldr	r0, [r4, #4]
 8000b76:	f7ff ffa1 	bl	8000abc <std>
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2109      	movs	r1, #9
 8000b7e:	68a0      	ldr	r0, [r4, #8]
 8000b80:	f7ff ff9c 	bl	8000abc <std>
 8000b84:	2202      	movs	r2, #2
 8000b86:	2112      	movs	r1, #18
 8000b88:	68e0      	ldr	r0, [r4, #12]
 8000b8a:	f7ff ff97 	bl	8000abc <std>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61a3      	str	r3, [r4, #24]
 8000b92:	bd10      	pop	{r4, pc}
 8000b94:	080010ac 	.word	0x080010ac
 8000b98:	08000b05 	.word	0x08000b05

08000b9c <__sfp>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <__sfp+0x70>)
 8000ba0:	681e      	ldr	r6, [r3, #0]
 8000ba2:	69b3      	ldr	r3, [r6, #24]
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	b913      	cbnz	r3, 8000bae <__sfp+0x12>
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f7ff ffc7 	bl	8000b3c <__sinit>
 8000bae:	3648      	adds	r6, #72	; 0x48
 8000bb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	d503      	bpl.n	8000bc0 <__sfp+0x24>
 8000bb8:	6833      	ldr	r3, [r6, #0]
 8000bba:	b133      	cbz	r3, 8000bca <__sfp+0x2e>
 8000bbc:	6836      	ldr	r6, [r6, #0]
 8000bbe:	e7f7      	b.n	8000bb0 <__sfp+0x14>
 8000bc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bc4:	b16d      	cbz	r5, 8000be2 <__sfp+0x46>
 8000bc6:	3468      	adds	r4, #104	; 0x68
 8000bc8:	e7f4      	b.n	8000bb4 <__sfp+0x18>
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4638      	mov	r0, r7
 8000bce:	f7ff ff9f 	bl	8000b10 <__sfmoreglue>
 8000bd2:	6030      	str	r0, [r6, #0]
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d1f1      	bne.n	8000bbc <__sfp+0x20>
 8000bd8:	230c      	movs	r3, #12
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4604      	mov	r4, r0
 8000bde:	4620      	mov	r0, r4
 8000be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <__sfp+0x74>)
 8000be4:	6665      	str	r5, [r4, #100]	; 0x64
 8000be6:	e9c4 5500 	strd	r5, r5, [r4]
 8000bea:	60a5      	str	r5, [r4, #8]
 8000bec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000bf0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bfc:	f7ff fd82 	bl	8000704 <memset>
 8000c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c08:	e7e9      	b.n	8000bde <__sfp+0x42>
 8000c0a:	bf00      	nop
 8000c0c:	080010ac 	.word	0x080010ac
 8000c10:	ffff0001 	.word	0xffff0001

08000c14 <_fwalk_reent>:
 8000c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c18:	4680      	mov	r8, r0
 8000c1a:	4689      	mov	r9, r1
 8000c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c20:	2600      	movs	r6, #0
 8000c22:	b914      	cbnz	r4, 8000c2a <_fwalk_reent+0x16>
 8000c24:	4630      	mov	r0, r6
 8000c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000c2e:	3f01      	subs	r7, #1
 8000c30:	d501      	bpl.n	8000c36 <_fwalk_reent+0x22>
 8000c32:	6824      	ldr	r4, [r4, #0]
 8000c34:	e7f5      	b.n	8000c22 <_fwalk_reent+0xe>
 8000c36:	89ab      	ldrh	r3, [r5, #12]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d907      	bls.n	8000c4c <_fwalk_reent+0x38>
 8000c3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c40:	3301      	adds	r3, #1
 8000c42:	d003      	beq.n	8000c4c <_fwalk_reent+0x38>
 8000c44:	4629      	mov	r1, r5
 8000c46:	4640      	mov	r0, r8
 8000c48:	47c8      	blx	r9
 8000c4a:	4306      	orrs	r6, r0
 8000c4c:	3568      	adds	r5, #104	; 0x68
 8000c4e:	e7ee      	b.n	8000c2e <_fwalk_reent+0x1a>

08000c50 <__swhatbuf_r>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	460e      	mov	r6, r1
 8000c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	b096      	sub	sp, #88	; 0x58
 8000c5c:	4614      	mov	r4, r2
 8000c5e:	461d      	mov	r5, r3
 8000c60:	da07      	bge.n	8000c72 <__swhatbuf_r+0x22>
 8000c62:	2300      	movs	r3, #0
 8000c64:	602b      	str	r3, [r5, #0]
 8000c66:	89b3      	ldrh	r3, [r6, #12]
 8000c68:	061a      	lsls	r2, r3, #24
 8000c6a:	d410      	bmi.n	8000c8e <__swhatbuf_r+0x3e>
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	e00e      	b.n	8000c90 <__swhatbuf_r+0x40>
 8000c72:	466a      	mov	r2, sp
 8000c74:	f000 f96e 	bl	8000f54 <_fstat_r>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	dbf2      	blt.n	8000c62 <__swhatbuf_r+0x12>
 8000c7c:	9a01      	ldr	r2, [sp, #4]
 8000c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c86:	425a      	negs	r2, r3
 8000c88:	415a      	adcs	r2, r3
 8000c8a:	602a      	str	r2, [r5, #0]
 8000c8c:	e7ee      	b.n	8000c6c <__swhatbuf_r+0x1c>
 8000c8e:	2340      	movs	r3, #64	; 0x40
 8000c90:	2000      	movs	r0, #0
 8000c92:	6023      	str	r3, [r4, #0]
 8000c94:	b016      	add	sp, #88	; 0x58
 8000c96:	bd70      	pop	{r4, r5, r6, pc}

08000c98 <__smakebuf_r>:
 8000c98:	898b      	ldrh	r3, [r1, #12]
 8000c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c9c:	079d      	lsls	r5, r3, #30
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460c      	mov	r4, r1
 8000ca2:	d507      	bpl.n	8000cb4 <__smakebuf_r+0x1c>
 8000ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ca8:	6023      	str	r3, [r4, #0]
 8000caa:	6123      	str	r3, [r4, #16]
 8000cac:	2301      	movs	r3, #1
 8000cae:	6163      	str	r3, [r4, #20]
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
 8000cb4:	ab01      	add	r3, sp, #4
 8000cb6:	466a      	mov	r2, sp
 8000cb8:	f7ff ffca 	bl	8000c50 <__swhatbuf_r>
 8000cbc:	9900      	ldr	r1, [sp, #0]
 8000cbe:	4605      	mov	r5, r0
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	f000 f877 	bl	8000db4 <_malloc_r>
 8000cc6:	b948      	cbnz	r0, 8000cdc <__smakebuf_r+0x44>
 8000cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ccc:	059a      	lsls	r2, r3, #22
 8000cce:	d4ef      	bmi.n	8000cb0 <__smakebuf_r+0x18>
 8000cd0:	f023 0303 	bic.w	r3, r3, #3
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	81a3      	strh	r3, [r4, #12]
 8000cda:	e7e3      	b.n	8000ca4 <__smakebuf_r+0xc>
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <__smakebuf_r+0x7c>)
 8000cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ce0:	89a3      	ldrh	r3, [r4, #12]
 8000ce2:	6020      	str	r0, [r4, #0]
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	81a3      	strh	r3, [r4, #12]
 8000cea:	9b00      	ldr	r3, [sp, #0]
 8000cec:	6163      	str	r3, [r4, #20]
 8000cee:	9b01      	ldr	r3, [sp, #4]
 8000cf0:	6120      	str	r0, [r4, #16]
 8000cf2:	b15b      	cbz	r3, 8000d0c <__smakebuf_r+0x74>
 8000cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cf8:	4630      	mov	r0, r6
 8000cfa:	f000 f93d 	bl	8000f78 <_isatty_r>
 8000cfe:	b128      	cbz	r0, 8000d0c <__smakebuf_r+0x74>
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	431d      	orrs	r5, r3
 8000d10:	81a5      	strh	r5, [r4, #12]
 8000d12:	e7cd      	b.n	8000cb0 <__smakebuf_r+0x18>
 8000d14:	08000b05 	.word	0x08000b05

08000d18 <_free_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4605      	mov	r5, r0
 8000d1c:	2900      	cmp	r1, #0
 8000d1e:	d045      	beq.n	8000dac <_free_r+0x94>
 8000d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d24:	1f0c      	subs	r4, r1, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bfb8      	it	lt
 8000d2a:	18e4      	addlt	r4, r4, r3
 8000d2c:	f000 f946 	bl	8000fbc <__malloc_lock>
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <_free_r+0x98>)
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	4610      	mov	r0, r2
 8000d36:	b933      	cbnz	r3, 8000d46 <_free_r+0x2e>
 8000d38:	6063      	str	r3, [r4, #4]
 8000d3a:	6014      	str	r4, [r2, #0]
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d42:	f000 b93c 	b.w	8000fbe <__malloc_unlock>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d90c      	bls.n	8000d64 <_free_r+0x4c>
 8000d4a:	6821      	ldr	r1, [r4, #0]
 8000d4c:	1862      	adds	r2, r4, r1
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	bf04      	itt	eq
 8000d52:	681a      	ldreq	r2, [r3, #0]
 8000d54:	685b      	ldreq	r3, [r3, #4]
 8000d56:	6063      	str	r3, [r4, #4]
 8000d58:	bf04      	itt	eq
 8000d5a:	1852      	addeq	r2, r2, r1
 8000d5c:	6022      	streq	r2, [r4, #0]
 8000d5e:	6004      	str	r4, [r0, #0]
 8000d60:	e7ec      	b.n	8000d3c <_free_r+0x24>
 8000d62:	4613      	mov	r3, r2
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	b10a      	cbz	r2, 8000d6c <_free_r+0x54>
 8000d68:	42a2      	cmp	r2, r4
 8000d6a:	d9fa      	bls.n	8000d62 <_free_r+0x4a>
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	1858      	adds	r0, r3, r1
 8000d70:	42a0      	cmp	r0, r4
 8000d72:	d10b      	bne.n	8000d8c <_free_r+0x74>
 8000d74:	6820      	ldr	r0, [r4, #0]
 8000d76:	4401      	add	r1, r0
 8000d78:	1858      	adds	r0, r3, r1
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	6019      	str	r1, [r3, #0]
 8000d7e:	d1dd      	bne.n	8000d3c <_free_r+0x24>
 8000d80:	6810      	ldr	r0, [r2, #0]
 8000d82:	6852      	ldr	r2, [r2, #4]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	4401      	add	r1, r0
 8000d88:	6019      	str	r1, [r3, #0]
 8000d8a:	e7d7      	b.n	8000d3c <_free_r+0x24>
 8000d8c:	d902      	bls.n	8000d94 <_free_r+0x7c>
 8000d8e:	230c      	movs	r3, #12
 8000d90:	602b      	str	r3, [r5, #0]
 8000d92:	e7d3      	b.n	8000d3c <_free_r+0x24>
 8000d94:	6820      	ldr	r0, [r4, #0]
 8000d96:	1821      	adds	r1, r4, r0
 8000d98:	428a      	cmp	r2, r1
 8000d9a:	bf04      	itt	eq
 8000d9c:	6811      	ldreq	r1, [r2, #0]
 8000d9e:	6852      	ldreq	r2, [r2, #4]
 8000da0:	6062      	str	r2, [r4, #4]
 8000da2:	bf04      	itt	eq
 8000da4:	1809      	addeq	r1, r1, r0
 8000da6:	6021      	streq	r1, [r4, #0]
 8000da8:	605c      	str	r4, [r3, #4]
 8000daa:	e7c7      	b.n	8000d3c <_free_r+0x24>
 8000dac:	bd38      	pop	{r3, r4, r5, pc}
 8000dae:	bf00      	nop
 8000db0:	20000098 	.word	0x20000098

08000db4 <_malloc_r>:
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	1ccd      	adds	r5, r1, #3
 8000db8:	f025 0503 	bic.w	r5, r5, #3
 8000dbc:	3508      	adds	r5, #8
 8000dbe:	2d0c      	cmp	r5, #12
 8000dc0:	bf38      	it	cc
 8000dc2:	250c      	movcc	r5, #12
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	4606      	mov	r6, r0
 8000dc8:	db01      	blt.n	8000dce <_malloc_r+0x1a>
 8000dca:	42a9      	cmp	r1, r5
 8000dcc:	d903      	bls.n	8000dd6 <_malloc_r+0x22>
 8000dce:	230c      	movs	r3, #12
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
 8000dd6:	f000 f8f1 	bl	8000fbc <__malloc_lock>
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <_malloc_r+0xac>)
 8000ddc:	6814      	ldr	r4, [r2, #0]
 8000dde:	4621      	mov	r1, r4
 8000de0:	b991      	cbnz	r1, 8000e08 <_malloc_r+0x54>
 8000de2:	4c20      	ldr	r4, [pc, #128]	; (8000e64 <_malloc_r+0xb0>)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	b91b      	cbnz	r3, 8000df0 <_malloc_r+0x3c>
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 f83d 	bl	8000e68 <_sbrk_r>
 8000dee:	6020      	str	r0, [r4, #0]
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f000 f838 	bl	8000e68 <_sbrk_r>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d124      	bne.n	8000e46 <_malloc_r+0x92>
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	6033      	str	r3, [r6, #0]
 8000e00:	4630      	mov	r0, r6
 8000e02:	f000 f8dc 	bl	8000fbe <__malloc_unlock>
 8000e06:	e7e4      	b.n	8000dd2 <_malloc_r+0x1e>
 8000e08:	680b      	ldr	r3, [r1, #0]
 8000e0a:	1b5b      	subs	r3, r3, r5
 8000e0c:	d418      	bmi.n	8000e40 <_malloc_r+0x8c>
 8000e0e:	2b0b      	cmp	r3, #11
 8000e10:	d90f      	bls.n	8000e32 <_malloc_r+0x7e>
 8000e12:	600b      	str	r3, [r1, #0]
 8000e14:	50cd      	str	r5, [r1, r3]
 8000e16:	18cc      	adds	r4, r1, r3
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f000 f8d0 	bl	8000fbe <__malloc_unlock>
 8000e1e:	f104 000b 	add.w	r0, r4, #11
 8000e22:	1d23      	adds	r3, r4, #4
 8000e24:	f020 0007 	bic.w	r0, r0, #7
 8000e28:	1ac3      	subs	r3, r0, r3
 8000e2a:	d0d3      	beq.n	8000dd4 <_malloc_r+0x20>
 8000e2c:	425a      	negs	r2, r3
 8000e2e:	50e2      	str	r2, [r4, r3]
 8000e30:	e7d0      	b.n	8000dd4 <_malloc_r+0x20>
 8000e32:	428c      	cmp	r4, r1
 8000e34:	684b      	ldr	r3, [r1, #4]
 8000e36:	bf16      	itet	ne
 8000e38:	6063      	strne	r3, [r4, #4]
 8000e3a:	6013      	streq	r3, [r2, #0]
 8000e3c:	460c      	movne	r4, r1
 8000e3e:	e7eb      	b.n	8000e18 <_malloc_r+0x64>
 8000e40:	460c      	mov	r4, r1
 8000e42:	6849      	ldr	r1, [r1, #4]
 8000e44:	e7cc      	b.n	8000de0 <_malloc_r+0x2c>
 8000e46:	1cc4      	adds	r4, r0, #3
 8000e48:	f024 0403 	bic.w	r4, r4, #3
 8000e4c:	42a0      	cmp	r0, r4
 8000e4e:	d005      	beq.n	8000e5c <_malloc_r+0xa8>
 8000e50:	1a21      	subs	r1, r4, r0
 8000e52:	4630      	mov	r0, r6
 8000e54:	f000 f808 	bl	8000e68 <_sbrk_r>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d0cf      	beq.n	8000dfc <_malloc_r+0x48>
 8000e5c:	6025      	str	r5, [r4, #0]
 8000e5e:	e7db      	b.n	8000e18 <_malloc_r+0x64>
 8000e60:	20000098 	.word	0x20000098
 8000e64:	2000009c 	.word	0x2000009c

08000e68 <_sbrk_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	4c06      	ldr	r4, [pc, #24]	; (8000e84 <_sbrk_r+0x1c>)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4605      	mov	r5, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	f7ff fbbc 	bl	80005f0 <_sbrk>
 8000e78:	1c43      	adds	r3, r0, #1
 8000e7a:	d102      	bne.n	8000e82 <_sbrk_r+0x1a>
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	b103      	cbz	r3, 8000e82 <_sbrk_r+0x1a>
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	bd38      	pop	{r3, r4, r5, pc}
 8000e84:	200000b0 	.word	0x200000b0

08000e88 <__sread>:
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e90:	f000 f896 	bl	8000fc0 <_read_r>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	bfab      	itete	ge
 8000e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e9c:	181b      	addge	r3, r3, r0
 8000e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ea2:	bfac      	ite	ge
 8000ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000ea6:	81a3      	strhlt	r3, [r4, #12]
 8000ea8:	bd10      	pop	{r4, pc}

08000eaa <__swrite>:
 8000eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eae:	461f      	mov	r7, r3
 8000eb0:	898b      	ldrh	r3, [r1, #12]
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	4605      	mov	r5, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	4616      	mov	r6, r2
 8000eba:	d505      	bpl.n	8000ec8 <__swrite+0x1e>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec4:	f000 f868 	bl	8000f98 <_lseek_r>
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ed2:	81a3      	strh	r3, [r4, #12]
 8000ed4:	4632      	mov	r2, r6
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ede:	f000 b817 	b.w	8000f10 <_write_r>

08000ee2 <__sseek>:
 8000ee2:	b510      	push	{r4, lr}
 8000ee4:	460c      	mov	r4, r1
 8000ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eea:	f000 f855 	bl	8000f98 <_lseek_r>
 8000eee:	1c43      	adds	r3, r0, #1
 8000ef0:	89a3      	ldrh	r3, [r4, #12]
 8000ef2:	bf15      	itete	ne
 8000ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000efe:	81a3      	strheq	r3, [r4, #12]
 8000f00:	bf18      	it	ne
 8000f02:	81a3      	strhne	r3, [r4, #12]
 8000f04:	bd10      	pop	{r4, pc}

08000f06 <__sclose>:
 8000f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f0a:	f000 b813 	b.w	8000f34 <_close_r>
	...

08000f10 <_write_r>:
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4c07      	ldr	r4, [pc, #28]	; (8000f30 <_write_r+0x20>)
 8000f14:	4605      	mov	r5, r0
 8000f16:	4608      	mov	r0, r1
 8000f18:	4611      	mov	r1, r2
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	6022      	str	r2, [r4, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	f7ff fb15 	bl	800054e <_write>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_write_r+0x1e>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_write_r+0x1e>
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	200000b0 	.word	0x200000b0

08000f34 <_close_r>:
 8000f34:	b538      	push	{r3, r4, r5, lr}
 8000f36:	4c06      	ldr	r4, [pc, #24]	; (8000f50 <_close_r+0x1c>)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4605      	mov	r5, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	6023      	str	r3, [r4, #0]
 8000f40:	f7ff fb21 	bl	8000586 <_close>
 8000f44:	1c43      	adds	r3, r0, #1
 8000f46:	d102      	bne.n	8000f4e <_close_r+0x1a>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	b103      	cbz	r3, 8000f4e <_close_r+0x1a>
 8000f4c:	602b      	str	r3, [r5, #0]
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	200000b0 	.word	0x200000b0

08000f54 <_fstat_r>:
 8000f54:	b538      	push	{r3, r4, r5, lr}
 8000f56:	4c07      	ldr	r4, [pc, #28]	; (8000f74 <_fstat_r+0x20>)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	4611      	mov	r1, r2
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	f7ff fb1c 	bl	800059e <_fstat>
 8000f66:	1c43      	adds	r3, r0, #1
 8000f68:	d102      	bne.n	8000f70 <_fstat_r+0x1c>
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	b103      	cbz	r3, 8000f70 <_fstat_r+0x1c>
 8000f6e:	602b      	str	r3, [r5, #0]
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
 8000f72:	bf00      	nop
 8000f74:	200000b0 	.word	0x200000b0

08000f78 <_isatty_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4c06      	ldr	r4, [pc, #24]	; (8000f94 <_isatty_r+0x1c>)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4605      	mov	r5, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	f7ff fb1b 	bl	80005be <_isatty>
 8000f88:	1c43      	adds	r3, r0, #1
 8000f8a:	d102      	bne.n	8000f92 <_isatty_r+0x1a>
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	b103      	cbz	r3, 8000f92 <_isatty_r+0x1a>
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	200000b0 	.word	0x200000b0

08000f98 <_lseek_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4c07      	ldr	r4, [pc, #28]	; (8000fb8 <_lseek_r+0x20>)
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6022      	str	r2, [r4, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f7ff fb14 	bl	80005d4 <_lseek>
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	d102      	bne.n	8000fb6 <_lseek_r+0x1e>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	b103      	cbz	r3, 8000fb6 <_lseek_r+0x1e>
 8000fb4:	602b      	str	r3, [r5, #0]
 8000fb6:	bd38      	pop	{r3, r4, r5, pc}
 8000fb8:	200000b0 	.word	0x200000b0

08000fbc <__malloc_lock>:
 8000fbc:	4770      	bx	lr

08000fbe <__malloc_unlock>:
 8000fbe:	4770      	bx	lr

08000fc0 <_read_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4c07      	ldr	r4, [pc, #28]	; (8000fe0 <_read_r+0x20>)
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4611      	mov	r1, r2
 8000fca:	2200      	movs	r2, #0
 8000fcc:	6022      	str	r2, [r4, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f7ff faa0 	bl	8000514 <_read>
 8000fd4:	1c43      	adds	r3, r0, #1
 8000fd6:	d102      	bne.n	8000fde <_read_r+0x1e>
 8000fd8:	6823      	ldr	r3, [r4, #0]
 8000fda:	b103      	cbz	r3, 8000fde <_read_r+0x1e>
 8000fdc:	602b      	str	r3, [r5, #0]
 8000fde:	bd38      	pop	{r3, r4, r5, pc}
 8000fe0:	200000b0 	.word	0x200000b0

08000fe4 <_init>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr

08000ff0 <_fini>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr
